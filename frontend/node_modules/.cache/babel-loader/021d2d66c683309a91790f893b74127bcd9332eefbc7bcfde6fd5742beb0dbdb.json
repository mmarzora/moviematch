{"ast":null,"code":"import axios from 'axios';\n\n// Create an axios instance with the base URL\nconst api = axios.create({\n  baseURL: 'http://127.0.0.1:8000'\n});\nclass MovieService {\n  constructor() {\n    this.API_BASE_URL = '/api/movies';\n  }\n  // Use relative URL since we have a proxy\n\n  async getRandomMovies(params = {}) {\n    try {\n      const response = await api.get(`${this.API_BASE_URL}/random`, {\n        params\n      });\n      if (!response.data || !response.data.movies) {\n        console.error('Invalid API response format:', response.data);\n        return [];\n      }\n      const movies = response.data.movies;\n      return movies;\n    } catch (error) {\n      console.error('Error fetching random movies:', error);\n      return [];\n    }\n  }\n  async getMovieDetails(movieId) {\n    try {\n      const response = await api.get(`${this.API_BASE_URL}/${movieId}`);\n      return {\n        ...response.data,\n        // genres is already parsed by the backend\n        poster: response.data.poster_url,\n        // For backward compatibility\n        year: response.data.release_year // For backward compatibility\n      };\n    } catch (error) {\n      var _error$response;\n      console.error('Error fetching movie details:', {\n        message: error.message,\n        status: (_error$response = error.response) === null || _error$response === void 0 ? void 0 : _error$response.status,\n        movieId: movieId\n      });\n      return null;\n    }\n  }\n  async getSimilarMovies(movieId, limit = 5) {\n    try {\n      const response = await api.get(`${this.API_BASE_URL}/${movieId}/similar`, {\n        params: {\n          limit\n        }\n      });\n\n      // The FastAPI endpoint returns { movies: Movie[] }\n      return response.data.movies.map(movie => ({\n        ...movie,\n        // genres is already parsed by the backend\n        poster: movie.poster_url,\n        // For backward compatibility\n        year: movie.release_year // For backward compatibility\n      }));\n    } catch (error) {\n      var _error$response2;\n      console.error('Error fetching similar movies:', {\n        message: error.message,\n        status: (_error$response2 = error.response) === null || _error$response2 === void 0 ? void 0 : _error$response2.status,\n        movieId: movieId\n      });\n      return [];\n    }\n  }\n}\nexport const movieService = new MovieService();","map":{"version":3,"names":["axios","api","create","baseURL","MovieService","constructor","API_BASE_URL","getRandomMovies","params","response","get","data","movies","console","error","getMovieDetails","movieId","poster","poster_url","year","release_year","_error$response","message","status","getSimilarMovies","limit","map","movie","_error$response2","movieService"],"sources":["/Users/maitemarzoratti/Documents/data-science/MovieMatch/moviematch/frontend/src/services/movieService.ts"],"sourcesContent":["import axios from 'axios';\n\n// Create an axios instance with the base URL\nconst api = axios.create({\n    baseURL: 'http://127.0.0.1:8000'\n});\n\nexport interface Movie {\n    id: number;\n    title: string;\n    description: string;\n    release_year: number;\n    poster_url: string;\n    poster?: string;  // For backward compatibility\n    genres: string[];  // Will be parsed from JSON\n    runtime_minutes: number;\n    rating: number;\n    year?: number;     // For backward compatibility\n    critic_score?: number;  // For backward compatibility\n    similarity?: number;  // Used when returning similar movies\n}\n\nclass MovieService {\n    private readonly API_BASE_URL = '/api/movies';  // Use relative URL since we have a proxy\n\n    async getRandomMovies(params: {\n        limit?: number;\n        year_start?: number;\n        year_end?: number;\n        minRating?: number;\n    } = {}): Promise<Movie[]> {\n        try {\n            const response = await api.get(`${this.API_BASE_URL}/random`, { params });\n            \n            if (!response.data || !response.data.movies) {\n                console.error('Invalid API response format:', response.data);\n                return [];\n            }\n\n            const movies = response.data.movies;\n            return movies;\n        } catch (error) {\n            console.error('Error fetching random movies:', error);\n            return [];\n        }\n    }\n\n    async getMovieDetails(movieId: number): Promise<Movie | null> {\n        try {\n            const response = await api.get(`${this.API_BASE_URL}/${movieId}`);\n            \n            return {\n                ...response.data,\n                // genres is already parsed by the backend\n                poster: response.data.poster_url,  // For backward compatibility\n                year: response.data.release_year   // For backward compatibility\n            };\n        } catch (error: any) {\n            console.error('Error fetching movie details:', {\n                message: error.message,\n                status: error.response?.status,\n                movieId: movieId\n            });\n            return null;\n        }\n    }\n\n    async getSimilarMovies(movieId: number, limit: number = 5): Promise<Movie[]> {\n        try {\n            const response = await api.get(`${this.API_BASE_URL}/${movieId}/similar`, {\n                params: { limit }\n            });\n            \n            // The FastAPI endpoint returns { movies: Movie[] }\n            return response.data.movies.map((movie: any) => ({\n                ...movie,\n                // genres is already parsed by the backend\n                poster: movie.poster_url,  // For backward compatibility\n                year: movie.release_year   // For backward compatibility\n            }));\n        } catch (error: any) {\n            console.error('Error fetching similar movies:', {\n                message: error.message,\n                status: error.response?.status,\n                movieId: movieId\n            });\n            return [];\n        }\n    }\n}\n\nexport const movieService = new MovieService(); "],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;;AAEzB;AACA,MAAMC,GAAG,GAAGD,KAAK,CAACE,MAAM,CAAC;EACrBC,OAAO,EAAE;AACb,CAAC,CAAC;AAiBF,MAAMC,YAAY,CAAC;EAAAC,YAAA;IAAA,KACEC,YAAY,GAAG,aAAa;EAAA;EAAG;;EAEhD,MAAMC,eAAeA,CAACC,MAKrB,GAAG,CAAC,CAAC,EAAoB;IACtB,IAAI;MACA,MAAMC,QAAQ,GAAG,MAAMR,GAAG,CAACS,GAAG,CAAC,GAAG,IAAI,CAACJ,YAAY,SAAS,EAAE;QAAEE;MAAO,CAAC,CAAC;MAEzE,IAAI,CAACC,QAAQ,CAACE,IAAI,IAAI,CAACF,QAAQ,CAACE,IAAI,CAACC,MAAM,EAAE;QACzCC,OAAO,CAACC,KAAK,CAAC,8BAA8B,EAAEL,QAAQ,CAACE,IAAI,CAAC;QAC5D,OAAO,EAAE;MACb;MAEA,MAAMC,MAAM,GAAGH,QAAQ,CAACE,IAAI,CAACC,MAAM;MACnC,OAAOA,MAAM;IACjB,CAAC,CAAC,OAAOE,KAAK,EAAE;MACZD,OAAO,CAACC,KAAK,CAAC,+BAA+B,EAAEA,KAAK,CAAC;MACrD,OAAO,EAAE;IACb;EACJ;EAEA,MAAMC,eAAeA,CAACC,OAAe,EAAyB;IAC1D,IAAI;MACA,MAAMP,QAAQ,GAAG,MAAMR,GAAG,CAACS,GAAG,CAAC,GAAG,IAAI,CAACJ,YAAY,IAAIU,OAAO,EAAE,CAAC;MAEjE,OAAO;QACH,GAAGP,QAAQ,CAACE,IAAI;QAChB;QACAM,MAAM,EAAER,QAAQ,CAACE,IAAI,CAACO,UAAU;QAAG;QACnCC,IAAI,EAAEV,QAAQ,CAACE,IAAI,CAACS,YAAY,CAAG;MACvC,CAAC;IACL,CAAC,CAAC,OAAON,KAAU,EAAE;MAAA,IAAAO,eAAA;MACjBR,OAAO,CAACC,KAAK,CAAC,+BAA+B,EAAE;QAC3CQ,OAAO,EAAER,KAAK,CAACQ,OAAO;QACtBC,MAAM,GAAAF,eAAA,GAAEP,KAAK,CAACL,QAAQ,cAAAY,eAAA,uBAAdA,eAAA,CAAgBE,MAAM;QAC9BP,OAAO,EAAEA;MACb,CAAC,CAAC;MACF,OAAO,IAAI;IACf;EACJ;EAEA,MAAMQ,gBAAgBA,CAACR,OAAe,EAAES,KAAa,GAAG,CAAC,EAAoB;IACzE,IAAI;MACA,MAAMhB,QAAQ,GAAG,MAAMR,GAAG,CAACS,GAAG,CAAC,GAAG,IAAI,CAACJ,YAAY,IAAIU,OAAO,UAAU,EAAE;QACtER,MAAM,EAAE;UAAEiB;QAAM;MACpB,CAAC,CAAC;;MAEF;MACA,OAAOhB,QAAQ,CAACE,IAAI,CAACC,MAAM,CAACc,GAAG,CAAEC,KAAU,KAAM;QAC7C,GAAGA,KAAK;QACR;QACAV,MAAM,EAAEU,KAAK,CAACT,UAAU;QAAG;QAC3BC,IAAI,EAAEQ,KAAK,CAACP,YAAY,CAAG;MAC/B,CAAC,CAAC,CAAC;IACP,CAAC,CAAC,OAAON,KAAU,EAAE;MAAA,IAAAc,gBAAA;MACjBf,OAAO,CAACC,KAAK,CAAC,gCAAgC,EAAE;QAC5CQ,OAAO,EAAER,KAAK,CAACQ,OAAO;QACtBC,MAAM,GAAAK,gBAAA,GAAEd,KAAK,CAACL,QAAQ,cAAAmB,gBAAA,uBAAdA,gBAAA,CAAgBL,MAAM;QAC9BP,OAAO,EAAEA;MACb,CAAC,CAAC;MACF,OAAO,EAAE;IACb;EACJ;AACJ;AAEA,OAAO,MAAMa,YAAY,GAAG,IAAIzB,YAAY,CAAC,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}