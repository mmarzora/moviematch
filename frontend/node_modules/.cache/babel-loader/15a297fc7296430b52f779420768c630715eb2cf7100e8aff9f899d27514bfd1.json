{"ast":null,"code":"var _jsxFileName = \"/Users/maitemarzoratti/Documents/data-science/MovieMatch/moviematch/frontend/src/components/MovieMatching.tsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState, useCallback, useMemo } from 'react';\nimport { movieService } from '../services/movieService';\nimport { sessionService } from '../services/sessionService';\nimport UserHistory from './UserHistory';\nimport './MovieMatching.css';\n\n// Extend the Movie interface for additional fields we need\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst MovieMatching = ({\n  session,\n  memberId\n}) => {\n  _s();\n  // Refs for state management\n  const mountedRef = React.useRef(true);\n  const processingRef = React.useRef(false);\n  const lastFetchRef = React.useRef(0);\n\n  // States\n  const [currentMovie, setCurrentMovie] = useState(null);\n  const [moviesList, setMoviesList] = useState([]);\n  const [moviesCache, setMoviesCache] = useState({});\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n  const [showHistory, setShowHistory] = useState(false);\n  const [matchFound, setMatchFound] = useState(null);\n  const [processedMatches, setProcessedMatches] = useState(new Set());\n  const [isPosterLoading, setIsPosterLoading] = useState(true);\n  const [isProcessingSwipe, setIsProcessingSwipe] = useState(false);\n  const otherMemberId = useMemo(() => session.members.find(id => id !== memberId), [session.members, memberId]);\n\n  // Reset mounted ref on every render\n  useEffect(() => {\n    mountedRef.current = true;\n    return () => {\n      mountedRef.current = false;\n    };\n  }, []);\n\n  // Clear error state after 5 seconds\n  useEffect(() => {\n    if (error) {\n      const timer = setTimeout(() => {\n        if (mountedRef.current) {\n          setError(null);\n        }\n      }, 5000);\n      return () => clearTimeout(timer);\n    }\n  }, [error]);\n\n  // Update cache with new movie\n  const updateMovieCache = useCallback(movie => {\n    if (mountedRef.current) {\n      setMoviesCache(prev => ({\n        ...prev,\n        [movie.id]: movie\n      }));\n    }\n  }, []);\n  const fetchMoviesList = useCallback(async () => {\n    const fetchId = Date.now();\n    lastFetchRef.current = fetchId;\n    try {\n      // Get all viewed movies from session history\n      const viewedMovies = new Set(session.viewedMovies || []);\n      const userHistory = session.userHistory[memberId] || [];\n      userHistory.forEach(h => viewedMovies.add(h.movieId));\n\n      // Fetch more movies than we need to account for filtering\n      const response = await movieService.getRandomMovies({\n        year_start: 2020,\n        limit: 50,\n        // Increased limit to ensure we have enough after filtering\n        minRating: 6.0\n      });\n\n      // Always update state if we have a valid response and this is the latest fetch\n      // Don't check mountedRef.current here since component might have remounted\n      if (lastFetchRef.current === fetchId && response.length > 0) {\n        // Filter out viewed movies and duplicates\n        const newMovies = response.filter(movie => !viewedMovies.has(movie.id));\n\n        // Update moviesList state with new movies\n        setMoviesList(prevList => {\n          const updatedList = [...prevList, ...newMovies];\n          return updatedList;\n        });\n\n        // Update cache\n        response.forEach(movie => updateMovieCache(movie));\n      }\n      return response;\n    } catch (error) {\n      console.error('Error fetching movies:', error);\n      return [];\n    }\n  }, [session.viewedMovies, session.userHistory, memberId, updateMovieCache]);\n  const getNextUnwatchedMovie = useCallback(async (movies, excludeMovieId) => {\n    // Get all viewed movies from session\n    const viewedMovies = new Set(session.viewedMovies || []);\n    const userHistory = session.userHistory[memberId] || [];\n    userHistory.forEach(h => viewedMovies.add(h.movieId));\n\n    // Also exclude the current movie being swiped\n    if (excludeMovieId) {\n      viewedMovies.add(excludeMovieId);\n    }\n\n    // Find first unwatched movie\n    const nextMovie = movies.find(movie => {\n      const isUnwatched = !viewedMovies.has(movie.id);\n      return isUnwatched;\n    });\n    if (!nextMovie && movies.length > 0) {\n      // If no unwatched movie found but we have movies, fetch more\n      const newMovies = await fetchMoviesList();\n      const foundMovie = newMovies.find(movie => !viewedMovies.has(movie.id));\n      return foundMovie || null;\n    }\n    return nextMovie || null;\n  }, [memberId, session.viewedMovies, session.userHistory, fetchMoviesList]);\n\n  // Effect to detect matches from session updates\n  useEffect(() => {\n    const checkForNewMatches = async () => {\n      if (!otherMemberId || !session.matches) return;\n\n      // Check all unprocessed matches\n      const newMatches = session.matches.filter(matchId => !processedMatches.has(matchId));\n\n      // Convert to array for iteration\n      for (const matchId of Array.from(newMatches)) {\n        // Check if this match involves the current user's previous like\n        const userHistory = session.userHistory[memberId] || [];\n        const otherUserHistory = session.userHistory[otherMemberId] || [];\n        const userLiked = userHistory.some(h => h.movieId === matchId && h.decision);\n        const otherUserLiked = otherUserHistory.some(h => h.movieId === matchId && h.decision);\n        if (userLiked && otherUserLiked) {\n          // Load movie details if not in cache\n          let matchedMovie = moviesCache[matchId];\n          if (!matchedMovie) {\n            try {\n              const movie = await movieService.getMovieDetails(matchId);\n              if (movie && mountedRef.current) {\n                updateMovieCache(movie);\n                matchedMovie = movie;\n              }\n            } catch (error) {\n              console.error('Failed to load match movie details:', error);\n              continue;\n            }\n          }\n          if (matchedMovie && mountedRef.current) {\n            setMatchFound(matchedMovie);\n            setProcessedMatches(prev => new Set([...prev, matchId]));\n            break; // Show one match at a time\n          }\n        }\n      }\n    };\n    checkForNewMatches();\n  }, [session.matches, session.userHistory, memberId, otherMemberId, moviesCache, updateMovieCache, processedMatches]);\n  const getNextMovie = useCallback(async excludeMovieId => {\n    try {\n      var _nextMovie;\n      // First try to get from current list, excluding the current movie\n      let nextMovie = await getNextUnwatchedMovie(moviesList, excludeMovieId);\n\n      // If no unwatched movies in current list, fetch new ones\n      if (!nextMovie) {\n        const fetchStartTime = Date.now();\n        const newMovies = await fetchMoviesList();\n\n        // Only use the new movies if no other fetch has happened\n        if (mountedRef.current && lastFetchRef.current === fetchStartTime && newMovies.length > 0) {\n          nextMovie = await getNextUnwatchedMovie(newMovies, excludeMovieId);\n        }\n      }\n\n      // Preload the poster if available\n      if ((_nextMovie = nextMovie) !== null && _nextMovie !== void 0 && _nextMovie.poster_url) {\n        const img = new Image();\n        img.src = nextMovie.poster_url;\n      }\n      return nextMovie;\n    } catch (error) {\n      console.error('Error getting next movie:', error);\n      return null;\n    }\n  }, [moviesList, getNextUnwatchedMovie, fetchMoviesList]);\n  const handlePosterLoad = useCallback(() => {\n    if (mountedRef.current) {\n      setIsPosterLoading(false);\n    }\n  }, []);\n  const handlePosterError = useCallback(() => {\n    if (mountedRef.current) {\n      setIsPosterLoading(false);\n    }\n  }, []);\n  const handleSwipe = useCallback(async liked => {\n    if (processingRef.current || !currentMovie) {\n      return;\n    }\n    try {\n      processingRef.current = true;\n      if (mountedRef.current) {\n        setIsProcessingSwipe(true);\n        setIsPosterLoading(true);\n        setError(null); // Clear any previous errors\n      }\n      const currentMovieId = currentMovie.id;\n\n      // First, get the next movie before updating Firebase\n      const nextMovie = await getNextMovie(currentMovieId);\n\n      // Then update Firebase\n      await sessionService.updateMovieSwipe(session.id, memberId, currentMovieId, liked);\n\n      // Finally, update the UI if component is still mounted\n      if (mountedRef.current) {\n        if (nextMovie) {\n          setCurrentMovie(nextMovie);\n          // Remove swiped movie from list to prevent showing it again\n          setMoviesList(prev => prev.filter(m => m.id !== currentMovieId));\n        } else {\n          setError('No more movies available.');\n        }\n      }\n    } catch (err) {\n      if (mountedRef.current) {\n        console.error('Error processing swipe:', err);\n        setError(`Failed to process your choice: ${err.message}`);\n      }\n    } finally {\n      if (mountedRef.current) {\n        processingRef.current = false;\n        setIsProcessingSwipe(false);\n      }\n    }\n  }, [currentMovie, session.id, memberId, getNextMovie]);\n  const handleButtonClick = useCallback((e, liked) => {\n    e.preventDefault();\n    e.stopPropagation();\n\n    // Store current scroll position\n    const currentScrollY = window.scrollY;\n\n    // Handle the swipe\n    handleSwipe(liked);\n\n    // Restore scroll position immediately\n    window.scrollTo(0, currentScrollY);\n  }, [handleSwipe]);\n\n  // Initial movie load\n  useEffect(() => {\n    let isMounted = true;\n    const initializeMovies = async () => {\n      try {\n        if (isMounted) {\n          setLoading(true);\n          setError(null);\n        }\n        const response = await fetchMoviesList();\n        if (isMounted) {\n          if (!response || response.length === 0) {\n            setError('No movies available. Please try again.');\n          }\n          setLoading(false);\n        }\n      } catch (error) {\n        if (isMounted) {\n          console.error('Error initializing movies:', error);\n          setError('Failed to load movies. Please try refreshing.');\n          setLoading(false);\n        }\n      }\n    };\n    initializeMovies();\n    return () => {\n      isMounted = false;\n    };\n  }, [fetchMoviesList]);\n\n  // Set the first unwatched movie when moviesList changes and currentMovie is null\n  useEffect(() => {\n    const initializeCurrentMovie = async () => {\n      if (!loading && !currentMovie && moviesList.length > 0) {\n        const firstMovie = await getNextMovie();\n        if (mountedRef.current) {\n          if (firstMovie) {\n            setCurrentMovie(firstMovie);\n            setError(null);\n          } else {\n            setError('No unwatched movies available.');\n          }\n        }\n      } else if (!loading && !currentMovie && moviesList.length === 0) {\n        setError('No movies available.');\n      }\n    };\n    initializeCurrentMovie();\n  }, [moviesList, loading, currentMovie, getNextMovie]);\n\n  // Loading and error states\n  if (loading) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"movie-loading\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"loading-spinner\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 343,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Loading movies...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 344,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 342,\n      columnNumber: 7\n    }, this);\n  }\n  if (error) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"movie-error\",\n      children: [/*#__PURE__*/_jsxDEV(\"p\", {\n        children: error\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 352,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => {\n          setLoading(true);\n          setError(null);\n          fetchMoviesList().then(() => setLoading(false));\n        },\n        className: \"retry-button\",\n        children: \"Retry\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 353,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 351,\n      columnNumber: 7\n    }, this);\n  }\n  if (!currentMovie) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"movie-error\",\n      children: [/*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"No movies available.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 370,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => {\n          setLoading(true);\n          setError(null);\n          fetchMoviesList().then(() => setLoading(false));\n        },\n        className: \"retry-button\",\n        children: \"Refresh Movies\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 371,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 369,\n      columnNumber: 7\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"movie-matching\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"session-info\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"member-info\",\n        children: [/*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"member-id\",\n          children: [\"Your ID: \", /*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"id\",\n            children: [memberId.slice(0, 8), \"...\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 389,\n            columnNumber: 45\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 389,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"session-id\",\n          children: [\"Session: \", session.code]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 390,\n          columnNumber: 11\n        }, this), otherMemberId && /*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"other-member\",\n          children: [\"Paired with: \", /*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"id\",\n            children: [otherMemberId.slice(0, 8), \"...\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 393,\n            columnNumber: 28\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 392,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"history-button\",\n          onClick: () => setShowHistory(true),\n          children: \"View History\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 398,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 388,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 387,\n      columnNumber: 7\n    }, this), matchFound && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"match-overlay\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"match-content\",\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          children: \"It's a Match! \\uD83C\\uDF89\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 410,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\"You both liked \\\"\", matchFound.title, \"\\\"\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 411,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: e => {\n            e.preventDefault();\n            e.stopPropagation();\n            setMatchFound(null);\n            if (currentMovie) {\n              handleSwipe(false); // Move to next movie only if we're stuck on current\n            }\n          },\n          children: \"Continue Swiping\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 412,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 409,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 408,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"movie-card\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"movie-poster-container\",\n        children: currentMovie.poster_url ? /*#__PURE__*/_jsxDEV(_Fragment, {\n          children: [/*#__PURE__*/_jsxDEV(\"img\", {\n            src: currentMovie.poster_url,\n            alt: currentMovie.title,\n            className: `movie-poster ${isPosterLoading ? 'hidden' : ''}`,\n            onLoad: handlePosterLoad,\n            onError: handlePosterError\n          }, `${currentMovie.id}-${Date.now()}`, false, {\n            fileName: _jsxFileName,\n            lineNumber: 432,\n            columnNumber: 15\n          }, this), isPosterLoading && /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"poster-loading\",\n            children: /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"loading-spinner\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 442,\n              columnNumber: 19\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 441,\n            columnNumber: 17\n          }, this)]\n        }, void 0, true) : /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"movie-poster-placeholder\",\n          children: \"No poster available\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 447,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 429,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"movie-info\",\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          children: currentMovie.title\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 454,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"year\",\n          children: currentMovie.release_year\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 455,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"rating\",\n          children: [\"Rating: \", Math.round(currentMovie.rating * 10), \"%\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 456,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"overview\",\n          children: currentMovie.description\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 457,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 453,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"swipe-buttons\",\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          type: \"button\",\n          className: \"swipe-button dislike\",\n          onClick: e => handleButtonClick(e, false),\n          disabled: isProcessingSwipe,\n          children: \"\\uD83D\\uDC4E Pass\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 461,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          type: \"button\",\n          className: \"swipe-button like\",\n          onClick: e => handleButtonClick(e, true),\n          disabled: isProcessingSwipe,\n          children: \"\\uD83D\\uDC4D Like\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 469,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 460,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 428,\n      columnNumber: 7\n    }, this), showHistory && /*#__PURE__*/_jsxDEV(UserHistory, {\n      history: session.userHistory[memberId] || [],\n      movies: moviesCache,\n      onClose: () => setShowHistory(false)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 481,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 386,\n    columnNumber: 5\n  }, this);\n};\n_s(MovieMatching, \"jpcw3ON3ynl/T/H6EZUK6ICivJQ=\");\n_c = MovieMatching;\nexport default MovieMatching;\nvar _c;\n$RefreshReg$(_c, \"MovieMatching\");","map":{"version":3,"names":["React","useEffect","useState","useCallback","useMemo","movieService","sessionService","UserHistory","jsxDEV","_jsxDEV","Fragment","_Fragment","MovieMatching","session","memberId","_s","mountedRef","useRef","processingRef","lastFetchRef","currentMovie","setCurrentMovie","moviesList","setMoviesList","moviesCache","setMoviesCache","loading","setLoading","error","setError","showHistory","setShowHistory","matchFound","setMatchFound","processedMatches","setProcessedMatches","Set","isPosterLoading","setIsPosterLoading","isProcessingSwipe","setIsProcessingSwipe","otherMemberId","members","find","id","current","timer","setTimeout","clearTimeout","updateMovieCache","movie","prev","fetchMoviesList","fetchId","Date","now","viewedMovies","userHistory","forEach","h","add","movieId","response","getRandomMovies","year_start","limit","minRating","length","newMovies","filter","has","prevList","updatedList","console","getNextUnwatchedMovie","movies","excludeMovieId","nextMovie","isUnwatched","foundMovie","checkForNewMatches","matches","newMatches","matchId","Array","from","otherUserHistory","userLiked","some","decision","otherUserLiked","matchedMovie","getMovieDetails","getNextMovie","_nextMovie","fetchStartTime","poster_url","img","Image","src","handlePosterLoad","handlePosterError","handleSwipe","liked","currentMovieId","updateMovieSwipe","m","err","message","handleButtonClick","e","preventDefault","stopPropagation","currentScrollY","window","scrollY","scrollTo","isMounted","initializeMovies","initializeCurrentMovie","firstMovie","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","then","slice","code","title","alt","onLoad","onError","release_year","Math","round","rating","description","type","disabled","history","onClose","_c","$RefreshReg$"],"sources":["/Users/maitemarzoratti/Documents/data-science/MovieMatch/moviematch/frontend/src/components/MovieMatching.tsx"],"sourcesContent":["import React, { useEffect, useState, useCallback, useMemo } from 'react';\nimport { Movie, movieService } from '../services/movieService';\nimport { sessionService, Session } from '../services/sessionService';\nimport UserHistory from './UserHistory';\nimport './MovieMatching.css';\n\n// Extend the Movie interface for additional fields we need\ninterface ExtendedMovie extends Movie {\n  overview?: string;  // Alias for description\n  critic_score?: number;  // Optional critic score\n  similarity?: number;\n  poster?: string;  // For backward compatibility\n  year?: number;    // For backward compatibility\n}\n\ninterface MovieMatchingProps {\n  session: Session;\n  memberId: string;\n}\n\nconst MovieMatching: React.FC<MovieMatchingProps> = ({ session, memberId }) => {\n  // Refs for state management\n  const mountedRef = React.useRef(true);\n  const processingRef = React.useRef(false);\n  const lastFetchRef = React.useRef<number>(0);\n  \n  // States\n  const [currentMovie, setCurrentMovie] = useState<ExtendedMovie | null>(null);\n  const [moviesList, setMoviesList] = useState<ExtendedMovie[]>([]);\n  const [moviesCache, setMoviesCache] = useState<{ [key: number]: Movie }>({});\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState<string | null>(null);\n  const [showHistory, setShowHistory] = useState(false);\n  const [matchFound, setMatchFound] = useState<Movie | null>(null);\n  const [processedMatches, setProcessedMatches] = useState<Set<number>>(new Set());\n  const [isPosterLoading, setIsPosterLoading] = useState(true);\n  const [isProcessingSwipe, setIsProcessingSwipe] = useState(false);\n\n  const otherMemberId = useMemo(() => \n    session.members.find(id => id !== memberId),\n    [session.members, memberId]\n  );\n\n  // Reset mounted ref on every render\n  useEffect(() => {\n    mountedRef.current = true;\n    return () => {\n      mountedRef.current = false;\n    };\n  }, []);\n\n  // Clear error state after 5 seconds\n  useEffect(() => {\n    if (error) {\n      const timer = setTimeout(() => {\n        if (mountedRef.current) {\n          setError(null);\n        }\n      }, 5000);\n      return () => clearTimeout(timer);\n    }\n  }, [error]);\n\n  // Update cache with new movie\n  const updateMovieCache = useCallback((movie: Movie) => {\n    if (mountedRef.current) {\n      setMoviesCache(prev => ({\n        ...prev,\n        [movie.id]: movie\n      }));\n    }\n  }, []);\n\n  const fetchMoviesList = useCallback(async () => {\n    const fetchId = Date.now();\n    lastFetchRef.current = fetchId;\n\n    try {\n      // Get all viewed movies from session history\n      const viewedMovies = new Set(session.viewedMovies || []);\n      const userHistory = session.userHistory[memberId] || [];\n      userHistory.forEach(h => viewedMovies.add(h.movieId));\n\n      // Fetch more movies than we need to account for filtering\n      const response = await movieService.getRandomMovies({\n        year_start: 2020,\n        limit: 50,  // Increased limit to ensure we have enough after filtering\n        minRating: 6.0\n      });\n\n      // Always update state if we have a valid response and this is the latest fetch\n      // Don't check mountedRef.current here since component might have remounted\n      if (lastFetchRef.current === fetchId && response.length > 0) {\n        // Filter out viewed movies and duplicates\n        const newMovies = response.filter(movie => !viewedMovies.has(movie.id));\n\n        // Update moviesList state with new movies\n        setMoviesList(prevList => {\n          const updatedList = [...prevList, ...newMovies];\n          return updatedList;\n        });\n\n        // Update cache\n        response.forEach(movie => updateMovieCache(movie));\n      }\n      \n      return response;\n    } catch (error) {\n      console.error('Error fetching movies:', error);\n      return [];\n    }\n  }, [session.viewedMovies, session.userHistory, memberId, updateMovieCache]);\n\n  const getNextUnwatchedMovie = useCallback(async (movies: Movie[], excludeMovieId?: number): Promise<Movie | null> => {\n    // Get all viewed movies from session\n    const viewedMovies = new Set(session.viewedMovies || []);\n    const userHistory = session.userHistory[memberId] || [];\n    userHistory.forEach(h => viewedMovies.add(h.movieId));\n\n    // Also exclude the current movie being swiped\n    if (excludeMovieId) {\n      viewedMovies.add(excludeMovieId);\n    }\n\n    // Find first unwatched movie\n    const nextMovie = movies.find(movie => {\n      const isUnwatched = !viewedMovies.has(movie.id);\n      return isUnwatched;\n    });\n    \n    if (!nextMovie && movies.length > 0) {\n      // If no unwatched movie found but we have movies, fetch more\n      const newMovies = await fetchMoviesList();\n      const foundMovie = newMovies.find(movie => !viewedMovies.has(movie.id));\n      return foundMovie || null;\n    }\n    \n    return nextMovie || null;\n  }, [memberId, session.viewedMovies, session.userHistory, fetchMoviesList]);\n\n  // Effect to detect matches from session updates\n  useEffect(() => {\n    const checkForNewMatches = async () => {\n      if (!otherMemberId || !session.matches) return;\n\n      // Check all unprocessed matches\n      const newMatches = session.matches.filter(matchId => !processedMatches.has(matchId));\n      \n      // Convert to array for iteration\n      for (const matchId of Array.from(newMatches)) {\n        // Check if this match involves the current user's previous like\n        const userHistory = session.userHistory[memberId] || [];\n        const otherUserHistory = session.userHistory[otherMemberId] || [];\n        \n        const userLiked = userHistory.some(h => h.movieId === matchId && h.decision);\n        const otherUserLiked = otherUserHistory.some(h => h.movieId === matchId && h.decision);\n\n        if (userLiked && otherUserLiked) {\n          // Load movie details if not in cache\n          let matchedMovie = moviesCache[matchId];\n          if (!matchedMovie) {\n            try {\n              const movie = await movieService.getMovieDetails(matchId);\n              if (movie && mountedRef.current) {\n                updateMovieCache(movie);\n                matchedMovie = movie;\n              }\n            } catch (error) {\n              console.error('Failed to load match movie details:', error);\n              continue;\n            }\n          }\n\n          if (matchedMovie && mountedRef.current) {\n            setMatchFound(matchedMovie);\n            setProcessedMatches(prev => new Set([...prev, matchId]));\n            break; // Show one match at a time\n          }\n        }\n      }\n    };\n\n    checkForNewMatches();\n  }, [session.matches, session.userHistory, memberId, otherMemberId, moviesCache, updateMovieCache, processedMatches]);\n\n  const getNextMovie = useCallback(async (excludeMovieId?: number): Promise<ExtendedMovie | null> => {\n    try {\n      // First try to get from current list, excluding the current movie\n      let nextMovie = await getNextUnwatchedMovie(moviesList, excludeMovieId);\n      \n      // If no unwatched movies in current list, fetch new ones\n      if (!nextMovie) {\n        const fetchStartTime = Date.now();\n        const newMovies = await fetchMoviesList();\n        \n        // Only use the new movies if no other fetch has happened\n        if (mountedRef.current && lastFetchRef.current === fetchStartTime && newMovies.length > 0) {\n          nextMovie = await getNextUnwatchedMovie(newMovies, excludeMovieId);\n        }\n      }\n\n      // Preload the poster if available\n      if (nextMovie?.poster_url) {\n        const img = new Image();\n        img.src = nextMovie.poster_url;\n      }\n\n      return nextMovie;\n    } catch (error) {\n      console.error('Error getting next movie:', error);\n      return null;\n    }\n  }, [moviesList, getNextUnwatchedMovie, fetchMoviesList]);\n\n  const handlePosterLoad = useCallback(() => {\n    if (mountedRef.current) {\n      setIsPosterLoading(false);\n    }\n  }, []);\n\n  const handlePosterError = useCallback(() => {\n    if (mountedRef.current) {\n      setIsPosterLoading(false);\n    }\n  }, []);\n\n  const handleSwipe = useCallback(async (liked: boolean) => {\n    if (processingRef.current || !currentMovie) {\n      return;\n    }\n\n    try {\n      processingRef.current = true;\n      if (mountedRef.current) {\n        setIsProcessingSwipe(true);\n        setIsPosterLoading(true);\n        setError(null); // Clear any previous errors\n      }\n\n      const currentMovieId = currentMovie.id;\n      \n      // First, get the next movie before updating Firebase\n      const nextMovie = await getNextMovie(currentMovieId);\n      \n      // Then update Firebase\n      await sessionService.updateMovieSwipe(session.id, memberId, currentMovieId, liked);\n\n      // Finally, update the UI if component is still mounted\n      if (mountedRef.current) {\n        if (nextMovie) {\n          setCurrentMovie(nextMovie);\n          // Remove swiped movie from list to prevent showing it again\n          setMoviesList(prev => prev.filter(m => m.id !== currentMovieId));\n        } else {\n          setError('No more movies available.');\n        }\n      }\n    } catch (err: any) {\n      if (mountedRef.current) {\n        console.error('Error processing swipe:', err);\n        setError(`Failed to process your choice: ${err.message}`);\n      }\n    } finally {\n      if (mountedRef.current) {\n        processingRef.current = false;\n        setIsProcessingSwipe(false);\n      }\n    }\n  }, [currentMovie, session.id, memberId, getNextMovie]);\n\n  const handleButtonClick = useCallback((e: React.MouseEvent<HTMLButtonElement>, liked: boolean) => {\n    e.preventDefault();\n    e.stopPropagation();\n    \n    // Store current scroll position\n    const currentScrollY = window.scrollY;\n    \n    // Handle the swipe\n    handleSwipe(liked);\n    \n    // Restore scroll position immediately\n    window.scrollTo(0, currentScrollY);\n  }, [handleSwipe]);\n\n  // Initial movie load\n  useEffect(() => {\n    let isMounted = true;\n    const initializeMovies = async () => {\n      try {\n        if (isMounted) {\n          setLoading(true);\n          setError(null);\n        }\n\n        const response = await fetchMoviesList();\n        \n        if (isMounted) {\n          if (!response || response.length === 0) {\n            setError('No movies available. Please try again.');\n          }\n          setLoading(false);\n        }\n      } catch (error) {\n        if (isMounted) {\n          console.error('Error initializing movies:', error);\n          setError('Failed to load movies. Please try refreshing.');\n          setLoading(false);\n        }\n      }\n    };\n\n    initializeMovies();\n    return () => {\n      isMounted = false;\n    };\n  }, [fetchMoviesList]);\n\n  // Set the first unwatched movie when moviesList changes and currentMovie is null\n  useEffect(() => {\n    const initializeCurrentMovie = async () => {\n      if (!loading && !currentMovie && moviesList.length > 0) {\n        const firstMovie = await getNextMovie();\n        if (mountedRef.current) {\n          if (firstMovie) {\n            setCurrentMovie(firstMovie);\n            setError(null);\n          } else {\n            setError('No unwatched movies available.');\n          }\n        }\n      } else if (!loading && !currentMovie && moviesList.length === 0) {\n        setError('No movies available.');\n      }\n    };\n\n    initializeCurrentMovie();\n  }, [moviesList, loading, currentMovie, getNextMovie]);\n\n  // Loading and error states\n  if (loading) {\n    return (\n      <div className=\"movie-loading\">\n        <div className=\"loading-spinner\"></div>\n        <p>Loading movies...</p>\n      </div>\n    );\n  }\n\n  if (error) {\n    return (\n      <div className=\"movie-error\">\n        <p>{error}</p>\n        <button \n          onClick={() => {\n            setLoading(true);\n            setError(null);\n            fetchMoviesList().then(() => setLoading(false));\n          }}\n          className=\"retry-button\"\n        >\n          Retry\n        </button>\n      </div>\n    );\n  }\n\n  if (!currentMovie) {\n    return (\n      <div className=\"movie-error\">\n        <p>No movies available.</p>\n        <button \n          onClick={() => {\n            setLoading(true);\n            setError(null);\n            fetchMoviesList().then(() => setLoading(false));\n          }}\n          className=\"retry-button\"\n        >\n          Refresh Movies\n        </button>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"movie-matching\">\n      <div className=\"session-info\">\n        <div className=\"member-info\">\n          <p className=\"member-id\">Your ID: <span className=\"id\">{memberId.slice(0, 8)}...</span></p>\n          <p className=\"session-id\">Session: {session.code}</p>\n          {otherMemberId && (\n            <p className=\"other-member\">\n              Paired with: <span className=\"id\">\n                {otherMemberId.slice(0, 8)}...\n              </span>\n            </p>\n          )}\n          <button \n            className=\"history-button\"\n            onClick={() => setShowHistory(true)}\n          >\n            View History\n          </button>\n        </div>\n      </div>\n\n      {matchFound && (\n        <div className=\"match-overlay\">\n          <div className=\"match-content\">\n            <h2>It's a Match! 🎉</h2>\n            <p>You both liked \"{matchFound.title}\"</p>\n            <button \n              onClick={(e) => {\n                e.preventDefault();\n                e.stopPropagation();\n                setMatchFound(null);\n                if (currentMovie) {\n                  handleSwipe(false); // Move to next movie only if we're stuck on current\n                }\n              }}\n            >\n              Continue Swiping\n            </button>\n          </div>\n        </div>\n      )}\n\n      <div className=\"movie-card\">\n        <div className=\"movie-poster-container\">\n          {currentMovie.poster_url ? (\n            <>\n              <img \n                key={`${currentMovie.id}-${Date.now()}`}\n                src={currentMovie.poster_url} \n                alt={currentMovie.title} \n                className={`movie-poster ${isPosterLoading ? 'hidden' : ''}`}\n                onLoad={handlePosterLoad}\n                onError={handlePosterError}\n              />\n              {isPosterLoading && (\n                <div className=\"poster-loading\">\n                  <div className=\"loading-spinner\"></div>\n                </div>\n              )}\n            </>\n          ) : (\n            <div className=\"movie-poster-placeholder\">\n              No poster available\n            </div>\n          )}\n        </div>\n\n        <div className=\"movie-info\">\n          <h2>{currentMovie.title}</h2>\n          <p className=\"year\">{currentMovie.release_year}</p>\n          <p className=\"rating\">Rating: {Math.round(currentMovie.rating * 10)}%</p>\n          <p className=\"overview\">{currentMovie.description}</p>\n        </div>\n\n        <div className=\"swipe-buttons\">\n          <button \n            type=\"button\"\n            className=\"swipe-button dislike\" \n            onClick={(e) => handleButtonClick(e, false)}\n            disabled={isProcessingSwipe}\n          >\n            👎 Pass\n          </button>\n          <button \n            type=\"button\"\n            className=\"swipe-button like\" \n            onClick={(e) => handleButtonClick(e, true)}\n            disabled={isProcessingSwipe}\n          >\n            👍 Like\n          </button>\n        </div>\n      </div>\n\n      {showHistory && (\n        <UserHistory\n          history={session.userHistory[memberId] || []}\n          movies={moviesCache}\n          onClose={() => setShowHistory(false)}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default MovieMatching; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}