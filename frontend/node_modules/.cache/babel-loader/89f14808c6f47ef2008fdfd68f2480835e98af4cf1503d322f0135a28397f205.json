{"ast":null,"code":"// IMPORTANT: Set your Firebase config values in a .env file at the project root.\n// Example .env:\n// REACT_APP_FIREBASE_API_KEY=your_api_key\n// REACT_APP_FIREBASE_AUTH_DOMAIN=your_auth_domain\n// REACT_APP_FIREBASE_PROJECT_ID=your_project_id\n// REACT_APP_FIREBASE_STORAGE_BUCKET=your_storage_bucket\n// REACT_APP_FIREBASE_MESSAGING_SENDER_ID=your_messaging_sender_id\n// REACT_APP_FIREBASE_APP_ID=your_app_id\n\nimport { initializeApp } from 'firebase/app';\nimport { getFirestore, enableIndexedDbPersistence } from 'firebase/firestore';\nimport { getAuth } from 'firebase/auth';\nimport { getStorage } from 'firebase/storage';\n\n// Load Firebase config from environment variables\nconst firebaseConfig = {\n  apiKey: process.env.REACT_APP_FIREBASE_API_KEY || '',\n  authDomain: process.env.REACT_APP_FIREBASE_AUTH_DOMAIN || '',\n  projectId: process.env.REACT_APP_FIREBASE_PROJECT_ID || '',\n  storageBucket: process.env.REACT_APP_FIREBASE_STORAGE_BUCKET || '',\n  messagingSenderId: process.env.REACT_APP_FIREBASE_MESSAGING_SENDER_ID || '',\n  appId: process.env.REACT_APP_FIREBASE_APP_ID || ''\n};\nconsole.log('Initializing Firebase with config:', {\n  ...firebaseConfig,\n  apiKey: '[HIDDEN]'\n});\n\n// Initialize Firebase\nconst app = initializeApp(firebaseConfig);\nconsole.log('Firebase app initialized successfully');\n\n// Initialize Firestore with settings\nconst db = getFirestore(app);\n\n// Enable offline persistence\nenableIndexedDbPersistence(db).then(() => {\n  console.log('Firestore persistence enabled');\n}).catch(err => {\n  if (err.code === 'failed-precondition') {\n    console.warn('Multiple tabs open, persistence can only be enabled in one tab at a time.');\n  } else if (err.code === 'unimplemented') {\n    console.warn('The current browser does not support persistence.');\n  }\n});\n\n// Initialize other services\nconst auth = getAuth(app);\nconst storage = getStorage(app);\nexport { db, auth, storage };\nexport default app;","map":{"version":3,"names":["initializeApp","getFirestore","enableIndexedDbPersistence","getAuth","getStorage","firebaseConfig","apiKey","process","env","REACT_APP_FIREBASE_API_KEY","authDomain","REACT_APP_FIREBASE_AUTH_DOMAIN","projectId","REACT_APP_FIREBASE_PROJECT_ID","storageBucket","REACT_APP_FIREBASE_STORAGE_BUCKET","messagingSenderId","REACT_APP_FIREBASE_MESSAGING_SENDER_ID","appId","REACT_APP_FIREBASE_APP_ID","console","log","app","db","then","catch","err","code","warn","auth","storage"],"sources":["/Users/maitemarzoratti/Documents/data-science/MovieMatch/moviematch/frontend/src/firebase.ts"],"sourcesContent":["// IMPORTANT: Set your Firebase config values in a .env file at the project root.\n// Example .env:\n// REACT_APP_FIREBASE_API_KEY=your_api_key\n// REACT_APP_FIREBASE_AUTH_DOMAIN=your_auth_domain\n// REACT_APP_FIREBASE_PROJECT_ID=your_project_id\n// REACT_APP_FIREBASE_STORAGE_BUCKET=your_storage_bucket\n// REACT_APP_FIREBASE_MESSAGING_SENDER_ID=your_messaging_sender_id\n// REACT_APP_FIREBASE_APP_ID=your_app_id\n\nimport { initializeApp } from 'firebase/app';\nimport { getFirestore, enableIndexedDbPersistence } from 'firebase/firestore';\nimport { getAuth } from 'firebase/auth';\nimport { getStorage } from 'firebase/storage';\n\n// Load Firebase config from environment variables\nconst firebaseConfig = {\n    apiKey: process.env.REACT_APP_FIREBASE_API_KEY || '',\n    authDomain: process.env.REACT_APP_FIREBASE_AUTH_DOMAIN || '',\n    projectId: process.env.REACT_APP_FIREBASE_PROJECT_ID || '',\n    storageBucket: process.env.REACT_APP_FIREBASE_STORAGE_BUCKET || '',\n    messagingSenderId: process.env.REACT_APP_FIREBASE_MESSAGING_SENDER_ID || '',\n    appId: process.env.REACT_APP_FIREBASE_APP_ID || ''\n};\n\nconsole.log('Initializing Firebase with config:', { ...firebaseConfig, apiKey: '[HIDDEN]' });\n\n// Initialize Firebase\nconst app = initializeApp(firebaseConfig);\nconsole.log('Firebase app initialized successfully');\n\n// Initialize Firestore with settings\nconst db = getFirestore(app);\n\n// Enable offline persistence\nenableIndexedDbPersistence(db)\n  .then(() => {\n    console.log('Firestore persistence enabled');\n  })\n  .catch((err) => {\n    if (err.code === 'failed-precondition') {\n      console.warn('Multiple tabs open, persistence can only be enabled in one tab at a time.');\n    } else if (err.code === 'unimplemented') {\n      console.warn('The current browser does not support persistence.');\n    }\n  });\n\n// Initialize other services\nconst auth = getAuth(app);\nconst storage = getStorage(app);\n\nexport { db, auth, storage };\nexport default app; "],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,SAASA,aAAa,QAAQ,cAAc;AAC5C,SAASC,YAAY,EAAEC,0BAA0B,QAAQ,oBAAoB;AAC7E,SAASC,OAAO,QAAQ,eAAe;AACvC,SAASC,UAAU,QAAQ,kBAAkB;;AAE7C;AACA,MAAMC,cAAc,GAAG;EACnBC,MAAM,EAAEC,OAAO,CAACC,GAAG,CAACC,0BAA0B,IAAI,EAAE;EACpDC,UAAU,EAAEH,OAAO,CAACC,GAAG,CAACG,8BAA8B,IAAI,EAAE;EAC5DC,SAAS,EAAEL,OAAO,CAACC,GAAG,CAACK,6BAA6B,IAAI,EAAE;EAC1DC,aAAa,EAAEP,OAAO,CAACC,GAAG,CAACO,iCAAiC,IAAI,EAAE;EAClEC,iBAAiB,EAAET,OAAO,CAACC,GAAG,CAACS,sCAAsC,IAAI,EAAE;EAC3EC,KAAK,EAAEX,OAAO,CAACC,GAAG,CAACW,yBAAyB,IAAI;AACpD,CAAC;AAEDC,OAAO,CAACC,GAAG,CAAC,oCAAoC,EAAE;EAAE,GAAGhB,cAAc;EAAEC,MAAM,EAAE;AAAW,CAAC,CAAC;;AAE5F;AACA,MAAMgB,GAAG,GAAGtB,aAAa,CAACK,cAAc,CAAC;AACzCe,OAAO,CAACC,GAAG,CAAC,uCAAuC,CAAC;;AAEpD;AACA,MAAME,EAAE,GAAGtB,YAAY,CAACqB,GAAG,CAAC;;AAE5B;AACApB,0BAA0B,CAACqB,EAAE,CAAC,CAC3BC,IAAI,CAAC,MAAM;EACVJ,OAAO,CAACC,GAAG,CAAC,+BAA+B,CAAC;AAC9C,CAAC,CAAC,CACDI,KAAK,CAAEC,GAAG,IAAK;EACd,IAAIA,GAAG,CAACC,IAAI,KAAK,qBAAqB,EAAE;IACtCP,OAAO,CAACQ,IAAI,CAAC,2EAA2E,CAAC;EAC3F,CAAC,MAAM,IAAIF,GAAG,CAACC,IAAI,KAAK,eAAe,EAAE;IACvCP,OAAO,CAACQ,IAAI,CAAC,mDAAmD,CAAC;EACnE;AACF,CAAC,CAAC;;AAEJ;AACA,MAAMC,IAAI,GAAG1B,OAAO,CAACmB,GAAG,CAAC;AACzB,MAAMQ,OAAO,GAAG1B,UAAU,CAACkB,GAAG,CAAC;AAE/B,SAASC,EAAE,EAAEM,IAAI,EAAEC,OAAO;AAC1B,eAAeR,GAAG","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}