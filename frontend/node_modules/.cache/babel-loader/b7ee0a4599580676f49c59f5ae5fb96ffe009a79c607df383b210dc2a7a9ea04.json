{"ast":null,"code":"/**\n * Service for interacting with the MovieMatch algorithm backend\n */\n\nimport { API_BASE_URL } from '../config';\nclass MatchingService {\n  async makeRequest(endpoint, options = {}) {\n    const url = `${API_BASE_URL}${endpoint}`;\n    const response = await fetch(url, {\n      headers: {\n        'Content-Type': 'application/json',\n        ...options.headers\n      },\n      ...options\n    });\n    if (!response.ok) {\n      const errorData = await response.json().catch(() => ({\n        detail: 'Unknown error'\n      }));\n      throw new Error(errorData.detail || `HTTP ${response.status}`);\n    }\n    return response.json();\n  }\n\n  /**\n   * Create a new matching session\n   */\n  async createSession(user1Id, user2Id) {\n    // Sort user IDs alphabetically to ensure consistent session creation\n    // This prevents duplicate sessions when users join in different orders\n    const [sortedUser1, sortedUser2] = [user1Id, user2Id].sort();\n    return this.makeRequest('/api/matching/sessions', {\n      method: 'POST',\n      body: JSON.stringify({\n        user1_id: sortedUser1,\n        user2_id: sortedUser2\n      })\n    });\n  }\n\n  /**\n   * Get movie recommendations for a session\n   */\n  async getRecommendations(sessionId, batchSize = 20, userId) {\n    return this.makeRequest(`/api/matching/sessions/${sessionId}/recommendations?batch_size=${batchSize}&user_id=${encodeURIComponent(userId)}`);\n  }\n\n  /**\n   * Submit user feedback for a movie\n   */\n  async submitFeedback(sessionId, feedback) {\n    return this.makeRequest(`/api/matching/sessions/${sessionId}/feedback`, {\n      method: 'POST',\n      body: JSON.stringify(feedback)\n    });\n  }\n\n  /**\n   * Get session statistics\n   */\n  async getSessionStats(sessionId) {\n    return this.makeRequest(`/api/matching/sessions/${sessionId}/stats`);\n  }\n\n  /**\n   * Get user preferences\n   */\n  async getUserPreferences(userId) {\n    return this.makeRequest(`/api/matching/users/${userId}/preferences`);\n  }\n\n  /**\n   * Check if backend is available\n   */\n  async healthCheck() {\n    return this.makeRequest('/health');\n  }\n}\nexport const matchingService = new MatchingService();","map":{"version":3,"names":["API_BASE_URL","MatchingService","makeRequest","endpoint","options","url","response","fetch","headers","ok","errorData","json","catch","detail","Error","status","createSession","user1Id","user2Id","sortedUser1","sortedUser2","sort","method","body","JSON","stringify","user1_id","user2_id","getRecommendations","sessionId","batchSize","userId","encodeURIComponent","submitFeedback","feedback","getSessionStats","getUserPreferences","healthCheck","matchingService"],"sources":["/Users/maitemarzoratti/Documents/data-science/MovieMatch/moviematch/frontend/src/services/matchingService.ts"],"sourcesContent":["/**\n * Service for interacting with the MovieMatch algorithm backend\n */\n\nimport { Movie } from './movieService';\nimport { API_BASE_URL } from '../config';\n\nexport interface MatchingSession {\n  session_id: string;\n  user1_id: string;\n  user2_id: string;\n}\n\nexport interface RecommendationsResponse {\n  movies: Movie[];\n  session_stage: string;\n  total_interactions: number;\n  mutual_likes: number;\n}\n\nexport interface FeedbackRequest {\n  user_id: string;\n  movie_id: number;\n  feedback_type: 'like' | 'dislike' | 'skip';\n  time_spent_ms?: number;\n}\n\nexport interface SessionStats {\n  session_id: string;\n  session_stage: string;\n  total_interactions: number;\n  mutual_likes: number;\n  user1_stats: {\n    likes: number;\n    dislikes: number;\n    skips: number;\n  };\n  user2_stats: {\n    likes: number;\n    dislikes: number;\n    skips: number;\n  };\n  created_at: string;\n  updated_at: string;\n}\n\nexport interface UserPreferences {\n  user_id: string;\n  genre_preferences: { [genre: string]: number };\n  rating_threshold: number;\n  year_preference_start: number;\n  confidence_score: number;\n  total_interactions: number;\n}\n\nclass MatchingService {\n  private async makeRequest<T>(endpoint: string, options: RequestInit = {}): Promise<T> {\n    const url = `${API_BASE_URL}${endpoint}`;\n    \n    const response = await fetch(url, {\n      headers: {\n        'Content-Type': 'application/json',\n        ...options.headers,\n      },\n      ...options,\n    });\n\n    if (!response.ok) {\n      const errorData = await response.json().catch(() => ({ detail: 'Unknown error' }));\n      throw new Error(errorData.detail || `HTTP ${response.status}`);\n    }\n\n    return response.json();\n  }\n\n  /**\n   * Create a new matching session\n   */\n  async createSession(user1Id: string, user2Id: string): Promise<{ session_id: string }> {\n    // Sort user IDs alphabetically to ensure consistent session creation\n    // This prevents duplicate sessions when users join in different orders\n    const [sortedUser1, sortedUser2] = [user1Id, user2Id].sort();\n    \n    return this.makeRequest<{ session_id: string }>('/api/matching/sessions', {\n      method: 'POST',\n      body: JSON.stringify({\n        user1_id: sortedUser1,\n        user2_id: sortedUser2,\n      }),\n    });\n  }\n\n  /**\n   * Get movie recommendations for a session\n   */\n  async getRecommendations(\n    sessionId: string,\n    batchSize: number = 20,\n    userId: string\n  ): Promise<RecommendationsResponse> {\n    return this.makeRequest<RecommendationsResponse>(\n      `/api/matching/sessions/${sessionId}/recommendations?batch_size=${batchSize}&user_id=${encodeURIComponent(userId)}`\n    );\n  }\n\n  /**\n   * Submit user feedback for a movie\n   */\n  async submitFeedback(\n    sessionId: string,\n    feedback: FeedbackRequest\n  ): Promise<{ success: boolean; message: string }> {\n    return this.makeRequest<{ success: boolean; message: string }>(\n      `/api/matching/sessions/${sessionId}/feedback`,\n      {\n        method: 'POST',\n        body: JSON.stringify(feedback),\n      }\n    );\n  }\n\n  /**\n   * Get session statistics\n   */\n  async getSessionStats(sessionId: string): Promise<SessionStats> {\n    return this.makeRequest<SessionStats>(`/api/matching/sessions/${sessionId}/stats`);\n  }\n\n  /**\n   * Get user preferences\n   */\n  async getUserPreferences(userId: string): Promise<UserPreferences> {\n    return this.makeRequest<UserPreferences>(`/api/matching/users/${userId}/preferences`);\n  }\n\n  /**\n   * Check if backend is available\n   */\n  async healthCheck(): Promise<{ status: string; service: string }> {\n    return this.makeRequest<{ status: string; service: string }>('/health');\n  }\n}\n\nexport const matchingService = new MatchingService(); "],"mappings":"AAAA;AACA;AACA;;AAGA,SAASA,YAAY,QAAQ,WAAW;AAkDxC,MAAMC,eAAe,CAAC;EACpB,MAAcC,WAAWA,CAAIC,QAAgB,EAAEC,OAAoB,GAAG,CAAC,CAAC,EAAc;IACpF,MAAMC,GAAG,GAAG,GAAGL,YAAY,GAAGG,QAAQ,EAAE;IAExC,MAAMG,QAAQ,GAAG,MAAMC,KAAK,CAACF,GAAG,EAAE;MAChCG,OAAO,EAAE;QACP,cAAc,EAAE,kBAAkB;QAClC,GAAGJ,OAAO,CAACI;MACb,CAAC;MACD,GAAGJ;IACL,CAAC,CAAC;IAEF,IAAI,CAACE,QAAQ,CAACG,EAAE,EAAE;MAChB,MAAMC,SAAS,GAAG,MAAMJ,QAAQ,CAACK,IAAI,CAAC,CAAC,CAACC,KAAK,CAAC,OAAO;QAAEC,MAAM,EAAE;MAAgB,CAAC,CAAC,CAAC;MAClF,MAAM,IAAIC,KAAK,CAACJ,SAAS,CAACG,MAAM,IAAI,QAAQP,QAAQ,CAACS,MAAM,EAAE,CAAC;IAChE;IAEA,OAAOT,QAAQ,CAACK,IAAI,CAAC,CAAC;EACxB;;EAEA;AACF;AACA;EACE,MAAMK,aAAaA,CAACC,OAAe,EAAEC,OAAe,EAAmC;IACrF;IACA;IACA,MAAM,CAACC,WAAW,EAAEC,WAAW,CAAC,GAAG,CAACH,OAAO,EAAEC,OAAO,CAAC,CAACG,IAAI,CAAC,CAAC;IAE5D,OAAO,IAAI,CAACnB,WAAW,CAAyB,wBAAwB,EAAE;MACxEoB,MAAM,EAAE,MAAM;MACdC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;QACnBC,QAAQ,EAAEP,WAAW;QACrBQ,QAAQ,EAAEP;MACZ,CAAC;IACH,CAAC,CAAC;EACJ;;EAEA;AACF;AACA;EACE,MAAMQ,kBAAkBA,CACtBC,SAAiB,EACjBC,SAAiB,GAAG,EAAE,EACtBC,MAAc,EACoB;IAClC,OAAO,IAAI,CAAC7B,WAAW,CACrB,0BAA0B2B,SAAS,+BAA+BC,SAAS,YAAYE,kBAAkB,CAACD,MAAM,CAAC,EACnH,CAAC;EACH;;EAEA;AACF;AACA;EACE,MAAME,cAAcA,CAClBJ,SAAiB,EACjBK,QAAyB,EACuB;IAChD,OAAO,IAAI,CAAChC,WAAW,CACrB,0BAA0B2B,SAAS,WAAW,EAC9C;MACEP,MAAM,EAAE,MAAM;MACdC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAACS,QAAQ;IAC/B,CACF,CAAC;EACH;;EAEA;AACF;AACA;EACE,MAAMC,eAAeA,CAACN,SAAiB,EAAyB;IAC9D,OAAO,IAAI,CAAC3B,WAAW,CAAe,0BAA0B2B,SAAS,QAAQ,CAAC;EACpF;;EAEA;AACF;AACA;EACE,MAAMO,kBAAkBA,CAACL,MAAc,EAA4B;IACjE,OAAO,IAAI,CAAC7B,WAAW,CAAkB,uBAAuB6B,MAAM,cAAc,CAAC;EACvF;;EAEA;AACF;AACA;EACE,MAAMM,WAAWA,CAAA,EAAiD;IAChE,OAAO,IAAI,CAACnC,WAAW,CAAsC,SAAS,CAAC;EACzE;AACF;AAEA,OAAO,MAAMoC,eAAe,GAAG,IAAIrC,eAAe,CAAC,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}