{"ast":null,"code":"var _jsxFileName = \"/Users/maitemarzoratti/Documents/data-science/MovieMatch/moviematch/frontend/src/components/SmartMovieMatching.tsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState, useCallback, useMemo, useRef } from 'react';\nimport { sessionService } from '../services/sessionService';\nimport { matchingService } from '../services/matchingService';\nimport { movieService } from '../services/movieService';\nimport UserHistory from './UserHistory';\nimport PreferencesComparison from './PreferencesComparison';\nimport SemanticPreferencesComparison from './SemanticPreferencesComparison';\nimport RecommendationExplanation from './RecommendationExplanation';\nimport './SmartMovieMatching.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst SmartMovieMatching = ({\n  session,\n  memberId\n}) => {\n  _s();\n  var _session$matches;\n  // Refs for state management\n  const mountedRef = useRef(true);\n  const swipeStartTimeRef = useRef(0);\n\n  // States\n  const [currentMovie, setCurrentMovie] = useState(null);\n  const [movieQueue, setMovieQueue] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n  const [showHistory, setShowHistory] = useState(false);\n  const [matchFound, setMatchFound] = useState(null);\n  const [isPosterLoading, setIsPosterLoading] = useState(true);\n  const [isProcessingSwipe, setIsProcessingSwipe] = useState(false);\n  const [showPreferences, setShowPreferences] = useState(false);\n  const [showSemanticAnalysis, setShowSemanticAnalysis] = useState(false);\n  const [showExplanation, setShowExplanation] = useState(false);\n  const [loadingMatchedMovie, setLoadingMatchedMovie] = useState(false);\n\n  // Algorithm-specific states\n  const [matchingSessionId, setMatchingSessionId] = useState(null);\n  const [algorithmState, setAlgorithmState] = useState(null);\n  const [userPreferences, setUserPreferences] = useState(null);\n  const [algorithmEnabled, setAlgorithmEnabled] = useState(false);\n  const [isInitializingSession, setIsInitializingSession] = useState(false);\n\n  // Lock to prevent multiple matching session creations per session\n  const creationInProgressRef = useRef({});\n  const otherMemberId = useMemo(() => session.members.find(id => id !== memberId), [session.members, memberId]);\n\n  // Add a ref to track previous render state to reduce logging\n  const prevRenderStateRef = useRef('');\n\n  // Reset mounted ref\n  useEffect(() => {\n    mountedRef.current = true;\n    return () => {\n      mountedRef.current = false;\n    };\n  }, []);\n\n  // Clear error state after 5 seconds\n  useEffect(() => {\n    if (error) {\n      const timer = setTimeout(() => {\n        if (mountedRef.current) {\n          setError(null);\n        }\n      }, 5000);\n      return () => clearTimeout(timer);\n    }\n  }, [error]);\n\n  // Initialize matching session when both users are present\n  useEffect(() => {\n    const initializeMatchingSession = async () => {\n      // Debounce: If Firestore already has a matchingSessionId, do not create a new one\n      if (session.matchingSessionId) {\n        // If our local state is not set, sync it\n        if (!matchingSessionId) {\n          setMatchingSessionId(session.matchingSessionId);\n          setAlgorithmEnabled(true);\n        }\n        return;\n      }\n      // Only proceed if we have both users and no session yet\n      if (!otherMemberId || isInitializingSession) {\n        return;\n      }\n      console.log('[SessionInit] Checking session state:', {\n        otherMemberId: !!otherMemberId,\n        sessionMatchingId: session.matchingSessionId,\n        localMatchingId: matchingSessionId,\n        members: session.members.length\n      });\n\n      // If the session already has a matching session ID, use it\n      if (session.matchingSessionId && !matchingSessionId) {\n        console.log('[SessionInit] Using existing matching session from Firebase:', session.matchingSessionId);\n        setMatchingSessionId(session.matchingSessionId);\n        setAlgorithmEnabled(true);\n        return;\n      }\n\n      // If we already have a local matching session ID, we're done\n      if (matchingSessionId) {\n        return;\n      }\n\n      // Ensure both users are in the Firebase session\n      if (!session.members.includes(memberId) || !session.members.includes(otherMemberId)) {\n        console.log('[SessionInit] Waiting for both users to be in Firebase session');\n        return;\n      }\n\n      // Only the leader (smallest user ID) should create the matching session\n      const [leaderId, followerId] = [memberId, otherMemberId].sort();\n      if (memberId !== leaderId) {\n        // Not the leader, just wait for Firestore to update\n        return;\n      }\n\n      // Prevent multiple creations for the same session\n      if (creationInProgressRef.current[session.id]) {\n        // Already creating a session for this session.id\n        return;\n      }\n      creationInProgressRef.current[session.id] = true;\n      setIsInitializingSession(true);\n      try {\n        console.log('[SessionInit] (Leader) Creating new matching session for:', memberId, 'and', otherMemberId);\n        const response = await matchingService.createSession(memberId, otherMemberId);\n        const newMatchingSessionId = response.session_id;\n        console.log('[SessionInit] Created matching session:', newMatchingSessionId);\n\n        // Try to set it in Firebase atomically\n        await sessionService.setMatchingSessionIdIfAbsent(session.id, newMatchingSessionId);\n\n        // The session update listener will pick up the change and set our local state\n        // Don't set local state here to avoid race conditions\n      } catch (error) {\n        console.warn('[SessionInit] Algorithm not available, falling back to random movies:', error.message);\n        if (mountedRef.current) {\n          setAlgorithmEnabled(false);\n          setLoading(false);\n        }\n      } finally {\n        if (mountedRef.current) {\n          setIsInitializingSession(false);\n        }\n      }\n    };\n    initializeMatchingSession();\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [memberId, otherMemberId, session.matchingSessionId, matchingSessionId, isInitializingSession, session.members, session.id]);\n\n  // Listen for changes to the Firebase session (including matchingSessionId)\n  useEffect(() => {\n    if (session.matchingSessionId && session.matchingSessionId !== matchingSessionId) {\n      console.log('[SessionInit] Syncing matching session ID from Firebase:', session.matchingSessionId);\n      setMatchingSessionId(session.matchingSessionId);\n      setAlgorithmEnabled(true);\n    }\n  }, [session.matchingSessionId, matchingSessionId]);\n\n  // Timeout fallback - if still loading after 15 seconds, fall back to random movies\n  useEffect(() => {\n    if (loading) {\n      const timeout = setTimeout(() => {\n        if (mountedRef.current && loading) {\n          console.log('[SessionInit] Loading timeout reached, falling back to random movies');\n          setAlgorithmEnabled(false);\n          setLoading(false);\n          setError('Algorithm unavailable - using random movie selection');\n        }\n      }, 15000);\n      return () => clearTimeout(timeout);\n    }\n  }, [loading, algorithmEnabled]);\n\n  // Load initial recommendations - Memoized to reduce re-renders\n  const loadRecommendations = useCallback(async () => {\n    if (!matchingSessionId) return;\n    try {\n      setLoading(true);\n      const recommendations = await matchingService.getRecommendations(matchingSessionId, 10, memberId);\n      if (mountedRef.current) {\n        setAlgorithmState(recommendations);\n        setMovieQueue(recommendations.movies);\n        // Only set currentMovie if it is null and there are movies\n        if (currentMovie === null && recommendations.movies.length > 0) {\n          console.log('[setCurrentMovie] Setting to first movie from recommendations:', recommendations.movies[0]);\n          setCurrentMovie(recommendations.movies[0]);\n        }\n      }\n    } catch (error) {\n      console.error('Failed to load recommendations:', error);\n      setError('Failed to load personalized recommendations');\n    } finally {\n      if (mountedRef.current) {\n        setLoading(false);\n      }\n    }\n  }, [matchingSessionId, currentMovie, memberId]);\n\n  // Load recommendations when session is ready\n  useEffect(() => {\n    if (matchingSessionId && algorithmEnabled) {\n      loadRecommendations();\n    }\n  }, [matchingSessionId, algorithmEnabled, loadRecommendations]);\n\n  // Load session stats periodically - Optimized for stability\n  useEffect(() => {\n    if (!matchingSessionId) return;\n    const loadStats = async () => {\n      try {\n        const prefs = await matchingService.getUserPreferences(memberId);\n        if (mountedRef.current) {\n          setUserPreferences(prevPrefs => {\n            if (JSON.stringify(prevPrefs) !== JSON.stringify(prefs)) {\n              return prefs;\n            }\n            return prevPrefs;\n          });\n        }\n      } catch (error) {\n        console.error('Failed to load user preferences:', error);\n      }\n    };\n    loadStats();\n    // Increased interval to reduce frequent updates\n    const interval = setInterval(loadStats, 30000); // Update every 30 seconds instead of 10\n    return () => clearInterval(interval);\n  }, [matchingSessionId, memberId]);\n\n  // Handle movie swipe with algorithm feedback\n  const handleSwipe = useCallback(async (movieId, liked) => {\n    if (isProcessingSwipe || !currentMovie) return;\n    setIsProcessingSwipe(true);\n    const timeSpent = Date.now() - swipeStartTimeRef.current;\n    try {\n      // Submit to Firebase first\n      await sessionService.updateMovieSwipe(session.id, memberId, movieId, liked);\n\n      // Submit to algorithm if enabled\n      if (matchingSessionId && algorithmEnabled) {\n        const feedbackType = liked ? 'like' : 'dislike';\n        try {\n          await matchingService.submitFeedback(matchingSessionId, {\n            user_id: memberId,\n            movie_id: movieId,\n            feedback_type: feedbackType,\n            time_spent_ms: timeSpent\n          });\n        } catch (algorithmError) {\n          console.error('[Algorithm] Failed to submit feedback:', algorithmError);\n          // Don't throw here - let Firebase save continue even if algorithm fails\n        }\n\n        // Load fresh recommendations after feedback\n        setTimeout(() => {\n          loadRecommendations();\n        }, 1000);\n      }\n\n      // Move to next movie\n      const currentIndex = movieQueue.findIndex(m => m.id === movieId);\n      const nextIndex = currentIndex + 1;\n      if (nextIndex < movieQueue.length) {\n        setCurrentMovie(movieQueue[nextIndex]);\n      } else {\n        setCurrentMovie(null);\n        await loadRecommendations();\n      }\n    } catch (error) {\n      console.error('Error processing swipe:', error);\n      setError('Failed to process swipe');\n    } finally {\n      setIsProcessingSwipe(false);\n    }\n  }, [isProcessingSwipe, currentMovie, session.id, memberId, matchingSessionId, algorithmEnabled, movieQueue, loadRecommendations]);\n\n  // Handle like button\n  const handleLike = useCallback(() => {\n    if (currentMovie) {\n      handleSwipe(currentMovie.id, true);\n    }\n  }, [currentMovie, handleSwipe]);\n\n  // Handle dislike button\n  const handleDislike = useCallback(() => {\n    if (currentMovie) {\n      handleSwipe(currentMovie.id, false);\n    }\n  }, [currentMovie, handleSwipe]);\n\n  // Track time spent viewing each movie\n  useEffect(() => {\n    if (currentMovie) {\n      swipeStartTimeRef.current = Date.now();\n    }\n  }, [currentMovie]);\n\n  // Check for matches in Firebase - Optimized to reduce re-renders\n  const checkForMatches = useCallback(async () => {\n    if (!session.matches || session.matches.length === 0) {\n      // Only log once when there are no matches, not repeatedly\n      return;\n    }\n    const latestMatchId = session.matches[session.matches.length - 1];\n\n    // Check if this user liked the matched movie\n    const userHistory = session.userHistory[memberId] || [];\n    const userLikedMatch = userHistory.some(h => h.movieId === latestMatchId && h.decision);\n\n    // Check if the other user also liked the matched movie\n    const otherUserHistory = otherMemberId ? session.userHistory[otherMemberId] || [] : [];\n    const otherUserLikedMatch = otherUserHistory.some(h => h.movieId === latestMatchId && h.decision);\n\n    // Only show match modal if:\n    // 1. This user liked the movie\n    // 2. The other user also liked the movie (mutual like)\n    // 3. We haven't already shown this match\n    if (userLikedMatch && otherUserLikedMatch && (!matchFound || matchFound.id !== latestMatchId)) {\n      console.log('🎉 Match detected!', {\n        movieId: latestMatchId,\n        userLiked: userLikedMatch,\n        otherUserLiked: otherUserLikedMatch,\n        memberId,\n        otherMemberId\n      });\n      setLoadingMatchedMovie(true);\n      try {\n        // First try to find the movie in our current queue\n        let matchedMovie = movieQueue.find(m => m.id === latestMatchId);\n\n        // If not found in queue, try to fetch from algorithm recommendations if available\n        if (!matchedMovie && matchingSessionId) {\n          try {\n            const recommendations = await matchingService.getRecommendations(matchingSessionId, 50, memberId);\n            matchedMovie = recommendations.movies.find(m => m.id === latestMatchId);\n          } catch (error) {\n            console.warn('Could not fetch from algorithm:', error);\n          }\n        }\n\n        // If still not found, use current movie as fallback (shouldn't happen often)\n        if (!matchedMovie && (currentMovie === null || currentMovie === void 0 ? void 0 : currentMovie.id) === latestMatchId) {\n          matchedMovie = currentMovie;\n        }\n\n        // Final fallback: fetch movie details directly from the movie service\n        if (!matchedMovie) {\n          try {\n            console.log('🔍 Fetching movie details from movie service for ID:', latestMatchId);\n            const movieFromService = await movieService.getMovieDetails(latestMatchId);\n            if (movieFromService) {\n              matchedMovie = movieFromService;\n            }\n          } catch (error) {\n            console.warn('Could not fetch movie details from movie service:', error);\n          }\n        }\n        if (matchedMovie) {\n          console.log('📽️ Showing match modal for movie:', matchedMovie.title);\n          console.log('📽️ Movie data:', {\n            title: matchedMovie.title,\n            poster_url: matchedMovie.poster_url,\n            description: matchedMovie.description,\n            genres: matchedMovie.genres,\n            release_year: matchedMovie.release_year\n          });\n          setMatchFound(matchedMovie);\n        } else {\n          console.warn('⚠️ Could not find movie data for match:', latestMatchId);\n        }\n      } catch (error) {\n        console.error('Error retrieving matched movie:', error);\n      } finally {\n        setLoadingMatchedMovie(false);\n      }\n    }\n  }, [session.matches, session.userHistory, memberId, otherMemberId, matchFound, matchingSessionId, movieQueue, currentMovie]);\n  useEffect(() => {\n    checkForMatches();\n  }, [checkForMatches]);\n\n  // Only log renders when state actually changes\n  const currentRenderState = JSON.stringify({\n    currentMovie: currentMovie === null || currentMovie === void 0 ? void 0 : currentMovie.title,\n    algorithmEnabled,\n    matchingSessionId,\n    sessionMatches: ((_session$matches = session.matches) === null || _session$matches === void 0 ? void 0 : _session$matches.length) || 0,\n    userHistoryLength: (session.userHistory[memberId] || []).length\n  });\n  if (prevRenderStateRef.current !== currentRenderState) {\n    var _session$matches2;\n    console.log('🎬 Rendering SmartMovieMatching with:', {\n      currentMovie: currentMovie === null || currentMovie === void 0 ? void 0 : currentMovie.title,\n      algorithmEnabled,\n      matchingSessionId,\n      sessionMatches: ((_session$matches2 = session.matches) === null || _session$matches2 === void 0 ? void 0 : _session$matches2.length) || 0,\n      userHistoryLength: (session.userHistory[memberId] || []).length\n    });\n    prevRenderStateRef.current = currentRenderState;\n  }\n  if (loading) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"movie-matching\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"loading-container\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"loading-spinner\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 446,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"Loading personalized recommendations...\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 447,\n          columnNumber: 11\n        }, this), algorithmEnabled && /*#__PURE__*/_jsxDEV(\"small\", {\n          children: \"Powered by MovieMatch Algorithm\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 449,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          style: {\n            marginTop: '20px',\n            fontSize: '0.8rem',\n            color: 'rgba(255,255,255,0.7)'\n          },\n          children: [\"Debug: Session ID: \", session.id, \", Member ID: \", memberId, \", Other Member: \", otherMemberId || 'waiting...']\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 452,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 445,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 444,\n      columnNumber: 7\n    }, this);\n  }\n  if (error) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"movie-matching\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"error-container\",\n        children: [/*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"error-message\",\n          children: error\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 464,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: loadRecommendations,\n          className: \"retry-button\",\n          children: \"Try Again\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 465,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          style: {\n            marginTop: '20px',\n            fontSize: '0.8rem',\n            color: '#6c757d'\n          },\n          children: [\"Debug: Algorithm enabled: \", algorithmEnabled ? 'Yes' : 'No', \", Session: \", matchingSessionId || 'None']\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 469,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 463,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 462,\n      columnNumber: 7\n    }, this);\n  }\n  if (!currentMovie) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"movie-matching\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"no-movies-container\",\n        children: [/*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"No more movies available\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 481,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: loadRecommendations,\n          className: \"retry-button\",\n          children: \"Load More\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 482,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          style: {\n            marginTop: '20px',\n            fontSize: '0.8rem',\n            color: '#6c757d'\n          },\n          children: [\"Debug: Queue length: \", movieQueue.length, \", Algorithm: \", algorithmEnabled ? 'enabled' : 'disabled']\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 486,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 480,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 479,\n      columnNumber: 7\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"movie-matching\",\n    children: [algorithmEnabled && algorithmState && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"algorithm-status\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"status-info\",\n        children: [/*#__PURE__*/_jsxDEV(\"span\", {\n          className: `stage-badge stage-${algorithmState.session_stage}`,\n          children: algorithmState.session_stage.toUpperCase()\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 500,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"interactions\",\n          children: [algorithmState.total_interactions, \" interactions\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 503,\n          columnNumber: 13\n        }, this), algorithmState.mutual_likes > 0 && /*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"mutual-likes\",\n          children: [\"\\uD83C\\uDFAF \", algorithmState.mutual_likes, \" mutual likes\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 507,\n          columnNumber: 15\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 499,\n        columnNumber: 11\n      }, this), userPreferences && userPreferences.confidence_score > 0 && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"confidence-score\",\n        children: [\"Confidence: \", (userPreferences.confidence_score * 100).toFixed(0), \"%\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 513,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 498,\n      columnNumber: 9\n    }, this), algorithmEnabled && matchingSessionId && otherMemberId && showPreferences && /*#__PURE__*/_jsxDEV(PreferencesComparison, {\n      user1Id: memberId,\n      user2Id: otherMemberId,\n      user1Name: \"You\",\n      user2Name: \"Partner\",\n      matchingSessionId: matchingSessionId\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 522,\n      columnNumber: 9\n    }, this), algorithmEnabled && matchingSessionId && otherMemberId && showSemanticAnalysis && /*#__PURE__*/_jsxDEV(SemanticPreferencesComparison, {\n      user1Id: memberId,\n      user2Id: otherMemberId,\n      user1Name: \"You\",\n      user2Name: \"Partner\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 533,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"movie-card\",\n      children: [isPosterLoading && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"poster-loading\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"loading-spinner\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 545,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 544,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"img\", {\n        src: currentMovie.poster_url || '/placeholder-poster.jpg',\n        alt: `${currentMovie.title} poster`,\n        className: \"movie-poster\",\n        onLoad: () => setIsPosterLoading(false),\n        onError: () => setIsPosterLoading(false),\n        style: {\n          display: isPosterLoading ? 'none' : 'block'\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 549,\n        columnNumber: 9\n      }, this), algorithmEnabled && matchingSessionId && otherMemberId && /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"why-button\",\n        onClick: () => setShowExplanation(true),\n        title: \"Why was this movie recommended?\",\n        children: \"\\uD83E\\uDD14 Why?\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 560,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"movie-info\",\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          className: \"movie-title\",\n          children: currentMovie.title\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 570,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"movie-meta\",\n          children: [/*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"movie-year\",\n            children: currentMovie.release_year\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 572,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"movie-rating\",\n            children: [\"\\u2B50 \", currentMovie.rating]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 573,\n            columnNumber: 13\n          }, this), currentMovie.runtime_minutes && /*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"movie-runtime\",\n            children: [currentMovie.runtime_minutes, \"min\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 575,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 571,\n          columnNumber: 11\n        }, this), currentMovie.genres && /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"movie-genres\",\n          children: (Array.isArray(currentMovie.genres) ? currentMovie.genres : JSON.parse(currentMovie.genres)).map(genre => /*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"genre-tag\",\n            children: genre\n          }, genre, false, {\n            fileName: _jsxFileName,\n            lineNumber: 582,\n            columnNumber: 17\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 580,\n          columnNumber: 13\n        }, this), currentMovie.description && /*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"movie-description\",\n          children: currentMovie.description\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 588,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 569,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 542,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"action-buttons\",\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"dislike-button\",\n        onClick: handleDislike,\n        disabled: isProcessingSwipe,\n        children: \"\\uD83D\\uDC4E Pass\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 595,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"like-button\",\n        onClick: handleLike,\n        disabled: isProcessingSwipe,\n        children: \"\\uD83D\\uDC4D Like\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 603,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 594,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"toggle-buttons\",\n      children: [algorithmEnabled && otherMemberId && /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"preferences-toggle\",\n        onClick: () => setShowPreferences(!showPreferences),\n        children: showPreferences ? 'Hide Preferences' : 'Show Taste Profiles'\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 615,\n        columnNumber: 11\n      }, this), algorithmEnabled && otherMemberId && /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"semantic-analysis-toggle\",\n        onClick: () => setShowSemanticAnalysis(!showSemanticAnalysis),\n        children: showSemanticAnalysis ? 'Hide Deep Analysis' : 'Show Deep Analysis'\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 624,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"history-toggle\",\n        onClick: () => setShowHistory(!showHistory),\n        children: showHistory ? 'Hide History' : 'Show History'\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 632,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 613,\n      columnNumber: 7\n    }, this), showHistory && /*#__PURE__*/_jsxDEV(UserHistory, {\n      history: session.userHistory[memberId] || [],\n      movies: {} // Empty for now, would need to load movie details\n      ,\n      onClose: () => setShowHistory(false)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 642,\n      columnNumber: 9\n    }, this), matchFound && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"match-modal-overlay\",\n      onClick: () => setMatchFound(null),\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"match-modal\",\n        onClick: e => e.stopPropagation(),\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"match-celebration\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"celebration-text\",\n            children: \"\\uD83C\\uDF89 IT'S A MATCH! \\uD83C\\uDF89\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 655,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"celebration-subtitle\",\n            children: \"You both loved this movie!\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 656,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 654,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"matched-movie-card vertical\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"matched-poster-container\",\n            children: /*#__PURE__*/_jsxDEV(\"img\", {\n              src: matchFound.poster_url || '/placeholder-poster.jpg',\n              alt: `${matchFound.title} poster`,\n              className: \"matched-poster\",\n              onError: e => {\n                console.log('🖼️ Poster failed to load:', matchFound.poster_url);\n                e.target.src = '/placeholder-poster.jpg';\n              },\n              onLoad: () => {\n                console.log('🖼️ Poster loaded successfully:', matchFound.poster_url);\n              }\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 662,\n              columnNumber: 17\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 661,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"matched-movie-details\",\n            children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n              className: \"matched-title\",\n              children: matchFound.title || 'Unknown Title'\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 676,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"matched-meta\",\n              children: [matchFound.release_year && /*#__PURE__*/_jsxDEV(\"span\", {\n                className: \"matched-year\",\n                children: matchFound.release_year\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 679,\n                columnNumber: 21\n              }, this), matchFound.rating && /*#__PURE__*/_jsxDEV(\"span\", {\n                className: \"matched-rating\",\n                children: [\"\\u2B50 \", matchFound.rating]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 682,\n                columnNumber: 21\n              }, this), matchFound.runtime_minutes && /*#__PURE__*/_jsxDEV(\"span\", {\n                className: \"matched-runtime\",\n                children: [matchFound.runtime_minutes, \"min\"]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 685,\n                columnNumber: 21\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 677,\n              columnNumber: 17\n            }, this), matchFound.genres && /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"matched-genres\",\n              children: (Array.isArray(matchFound.genres) ? matchFound.genres : JSON.parse(matchFound.genres || '[]')).slice(0, 3).map(genre => /*#__PURE__*/_jsxDEV(\"span\", {\n                className: \"matched-genre-tag\",\n                children: genre\n              }, genre, false, {\n                fileName: _jsxFileName,\n                lineNumber: 693,\n                columnNumber: 23\n              }, this))\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 689,\n              columnNumber: 19\n            }, this), matchFound.description && /*#__PURE__*/_jsxDEV(\"p\", {\n              className: \"matched-description\",\n              children: matchFound.description.length > 150 ? `${matchFound.description.substring(0, 150)}...` : matchFound.description\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 698,\n              columnNumber: 19\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 675,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 660,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"match-actions\",\n          children: /*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"close-match-button\",\n            onClick: () => setMatchFound(null),\n            children: \"Continue Swiping\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 709,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 708,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 652,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 651,\n      columnNumber: 9\n    }, this), loadingMatchedMovie && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"match-modal-overlay\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"match-modal loading-match\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"loading-spinner\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 724,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"Loading match details...\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 725,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 723,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 722,\n      columnNumber: 9\n    }, this), isProcessingSwipe && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"processing-overlay\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"loading-spinner\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 732,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 731,\n      columnNumber: 9\n    }, this), showExplanation && currentMovie && algorithmEnabled && matchingSessionId && otherMemberId && /*#__PURE__*/_jsxDEV(RecommendationExplanation, {\n      sessionId: matchingSessionId,\n      movieId: currentMovie.id,\n      user1Id: memberId,\n      user2Id: otherMemberId,\n      user1Name: \"You\",\n      user2Name: \"Partner\",\n      onClose: () => setShowExplanation(false)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 738,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 495,\n    columnNumber: 5\n  }, this);\n};\n_s(SmartMovieMatching, \"3xJDghu85ft1ll+I1QP+FcfLdro=\");\n_c = SmartMovieMatching;\nexport default SmartMovieMatching;\nvar _c;\n$RefreshReg$(_c, \"SmartMovieMatching\");","map":{"version":3,"names":["React","useEffect","useState","useCallback","useMemo","useRef","sessionService","matchingService","movieService","UserHistory","PreferencesComparison","SemanticPreferencesComparison","RecommendationExplanation","jsxDEV","_jsxDEV","SmartMovieMatching","session","memberId","_s","_session$matches","mountedRef","swipeStartTimeRef","currentMovie","setCurrentMovie","movieQueue","setMovieQueue","loading","setLoading","error","setError","showHistory","setShowHistory","matchFound","setMatchFound","isPosterLoading","setIsPosterLoading","isProcessingSwipe","setIsProcessingSwipe","showPreferences","setShowPreferences","showSemanticAnalysis","setShowSemanticAnalysis","showExplanation","setShowExplanation","loadingMatchedMovie","setLoadingMatchedMovie","matchingSessionId","setMatchingSessionId","algorithmState","setAlgorithmState","userPreferences","setUserPreferences","algorithmEnabled","setAlgorithmEnabled","isInitializingSession","setIsInitializingSession","creationInProgressRef","otherMemberId","members","find","id","prevRenderStateRef","current","timer","setTimeout","clearTimeout","initializeMatchingSession","console","log","sessionMatchingId","localMatchingId","length","includes","leaderId","followerId","sort","response","createSession","newMatchingSessionId","session_id","setMatchingSessionIdIfAbsent","warn","message","timeout","loadRecommendations","recommendations","getRecommendations","movies","loadStats","prefs","getUserPreferences","prevPrefs","JSON","stringify","interval","setInterval","clearInterval","handleSwipe","movieId","liked","timeSpent","Date","now","updateMovieSwipe","feedbackType","submitFeedback","user_id","movie_id","feedback_type","time_spent_ms","algorithmError","currentIndex","findIndex","m","nextIndex","handleLike","handleDislike","checkForMatches","matches","latestMatchId","userHistory","userLikedMatch","some","h","decision","otherUserHistory","otherUserLikedMatch","userLiked","otherUserLiked","matchedMovie","movieFromService","getMovieDetails","title","poster_url","description","genres","release_year","currentRenderState","sessionMatches","userHistoryLength","_session$matches2","className","children","fileName","_jsxFileName","lineNumber","columnNumber","style","marginTop","fontSize","color","onClick","session_stage","toUpperCase","total_interactions","mutual_likes","confidence_score","toFixed","user1Id","user2Id","user1Name","user2Name","src","alt","onLoad","onError","display","rating","runtime_minutes","Array","isArray","parse","map","genre","disabled","history","onClose","e","stopPropagation","target","slice","substring","sessionId","_c","$RefreshReg$"],"sources":["/Users/maitemarzoratti/Documents/data-science/MovieMatch/moviematch/frontend/src/components/SmartMovieMatching.tsx"],"sourcesContent":["import React, { useEffect, useState, useCallback, useMemo, useRef } from 'react';\nimport { Movie } from '../services/movieService';\nimport { sessionService, Session } from '../services/sessionService';\nimport { \n  matchingService, \n  RecommendationsResponse, \n  UserPreferences \n} from '../services/matchingService';\nimport { movieService } from '../services/movieService';\nimport UserHistory from './UserHistory';\nimport PreferencesComparison from './PreferencesComparison';\nimport SemanticPreferencesComparison from './SemanticPreferencesComparison';\nimport RecommendationExplanation from './RecommendationExplanation';\nimport './SmartMovieMatching.css';\n\ninterface SmartMovieMatchingProps {\n  session: Session;\n  memberId: string;\n}\n\nconst SmartMovieMatching: React.FC<SmartMovieMatchingProps> = ({ session, memberId }) => {\n  // Refs for state management\n  const mountedRef = useRef(true);\n  const swipeStartTimeRef = useRef<number>(0);\n  \n  // States\n  const [currentMovie, setCurrentMovie] = useState<Movie | null>(null);\n  const [movieQueue, setMovieQueue] = useState<Movie[]>([]);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState<string | null>(null);\n  const [showHistory, setShowHistory] = useState(false);\n  const [matchFound, setMatchFound] = useState<Movie | null>(null);\n  const [isPosterLoading, setIsPosterLoading] = useState(true);\n  const [isProcessingSwipe, setIsProcessingSwipe] = useState(false);\n  const [showPreferences, setShowPreferences] = useState(false);\n  const [showSemanticAnalysis, setShowSemanticAnalysis] = useState(false);\n  const [showExplanation, setShowExplanation] = useState(false);\n  const [loadingMatchedMovie, setLoadingMatchedMovie] = useState(false);\n  \n  // Algorithm-specific states\n  const [matchingSessionId, setMatchingSessionId] = useState<string | null>(null);\n  const [algorithmState, setAlgorithmState] = useState<RecommendationsResponse | null>(null);\n  const [userPreferences, setUserPreferences] = useState<UserPreferences | null>(null);\n  const [algorithmEnabled, setAlgorithmEnabled] = useState(false);\n  const [isInitializingSession, setIsInitializingSession] = useState(false);\n\n  // Lock to prevent multiple matching session creations per session\n  const creationInProgressRef = useRef<{ [sessionId: string]: boolean }>({});\n\n  const otherMemberId = useMemo(() => \n    session.members.find(id => id !== memberId),\n    [session.members, memberId]\n  );\n\n  // Add a ref to track previous render state to reduce logging\n  const prevRenderStateRef = useRef<string>('');\n\n  // Reset mounted ref\n  useEffect(() => {\n    mountedRef.current = true;\n    return () => {\n      mountedRef.current = false;\n    };\n  }, []);\n\n  // Clear error state after 5 seconds\n  useEffect(() => {\n    if (error) {\n      const timer = setTimeout(() => {\n        if (mountedRef.current) {\n          setError(null);\n        }\n      }, 5000);\n      return () => clearTimeout(timer);\n    }\n  }, [error]);\n\n  // Initialize matching session when both users are present\n  useEffect(() => {\n    const initializeMatchingSession = async () => {\n      // Debounce: If Firestore already has a matchingSessionId, do not create a new one\n      if (session.matchingSessionId) {\n        // If our local state is not set, sync it\n        if (!matchingSessionId) {\n          setMatchingSessionId(session.matchingSessionId);\n          setAlgorithmEnabled(true);\n        }\n        return;\n      }\n      // Only proceed if we have both users and no session yet\n      if (!otherMemberId || isInitializingSession) {\n        return;\n      }\n\n      console.log('[SessionInit] Checking session state:', {\n        otherMemberId: !!otherMemberId,\n        sessionMatchingId: session.matchingSessionId,\n        localMatchingId: matchingSessionId,\n        members: session.members.length\n      });\n\n      // If the session already has a matching session ID, use it\n      if (session.matchingSessionId && !matchingSessionId) {\n        console.log('[SessionInit] Using existing matching session from Firebase:', session.matchingSessionId);\n        setMatchingSessionId(session.matchingSessionId);\n        setAlgorithmEnabled(true);\n        return;\n      }\n\n      // If we already have a local matching session ID, we're done\n      if (matchingSessionId) {\n        return;\n      }\n\n      // Ensure both users are in the Firebase session\n      if (!session.members.includes(memberId) || !session.members.includes(otherMemberId)) {\n        console.log('[SessionInit] Waiting for both users to be in Firebase session');\n        return;\n      }\n\n      // Only the leader (smallest user ID) should create the matching session\n      const [leaderId, followerId] = [memberId, otherMemberId].sort();\n      if (memberId !== leaderId) {\n        // Not the leader, just wait for Firestore to update\n        return;\n      }\n\n      // Prevent multiple creations for the same session\n      if (creationInProgressRef.current[session.id]) {\n        // Already creating a session for this session.id\n        return;\n      }\n      creationInProgressRef.current[session.id] = true;\n\n      setIsInitializingSession(true);\n\n      try {\n        console.log('[SessionInit] (Leader) Creating new matching session for:', memberId, 'and', otherMemberId);\n        const response = await matchingService.createSession(memberId, otherMemberId);\n        const newMatchingSessionId = response.session_id;\n        console.log('[SessionInit] Created matching session:', newMatchingSessionId);\n        \n        // Try to set it in Firebase atomically\n        await sessionService.setMatchingSessionIdIfAbsent(session.id, newMatchingSessionId);\n        \n        // The session update listener will pick up the change and set our local state\n        // Don't set local state here to avoid race conditions\n        \n      } catch (error: any) {\n        console.warn('[SessionInit] Algorithm not available, falling back to random movies:', error.message);\n        if (mountedRef.current) {\n          setAlgorithmEnabled(false);\n          setLoading(false);\n        }\n      } finally {\n        if (mountedRef.current) {\n          setIsInitializingSession(false);\n        }\n      }\n    };\n\n    initializeMatchingSession();\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [memberId, otherMemberId, session.matchingSessionId, matchingSessionId, isInitializingSession, session.members, session.id]);\n\n  // Listen for changes to the Firebase session (including matchingSessionId)\n  useEffect(() => {\n    if (session.matchingSessionId && session.matchingSessionId !== matchingSessionId) {\n      console.log('[SessionInit] Syncing matching session ID from Firebase:', session.matchingSessionId);\n      setMatchingSessionId(session.matchingSessionId);\n      setAlgorithmEnabled(true);\n    }\n  }, [session.matchingSessionId, matchingSessionId]);\n\n  // Timeout fallback - if still loading after 15 seconds, fall back to random movies\n  useEffect(() => {\n    if (loading) {\n      const timeout = setTimeout(() => {\n        if (mountedRef.current && loading) {\n          console.log('[SessionInit] Loading timeout reached, falling back to random movies');\n          setAlgorithmEnabled(false);\n          setLoading(false);\n          setError('Algorithm unavailable - using random movie selection');\n        }\n      }, 15000);\n\n      return () => clearTimeout(timeout);\n    }\n  }, [loading, algorithmEnabled]);\n\n  // Load initial recommendations - Memoized to reduce re-renders\n  const loadRecommendations = useCallback(async () => {\n    if (!matchingSessionId) return;\n\n    try {\n      setLoading(true);\n      const recommendations = await matchingService.getRecommendations(matchingSessionId, 10, memberId);\n      \n      if (mountedRef.current) {\n        setAlgorithmState(recommendations);\n        setMovieQueue(recommendations.movies);\n        // Only set currentMovie if it is null and there are movies\n        if (currentMovie === null && recommendations.movies.length > 0) {\n          console.log('[setCurrentMovie] Setting to first movie from recommendations:', recommendations.movies[0]);\n          setCurrentMovie(recommendations.movies[0]);\n        }\n      }\n    } catch (error: any) {\n      console.error('Failed to load recommendations:', error);\n      setError('Failed to load personalized recommendations');\n    } finally {\n      if (mountedRef.current) {\n        setLoading(false);\n      }\n    }\n  }, [matchingSessionId, currentMovie, memberId]);\n\n  // Load recommendations when session is ready\n  useEffect(() => {\n    if (matchingSessionId && algorithmEnabled) {\n      loadRecommendations();\n    }\n  }, [matchingSessionId, algorithmEnabled, loadRecommendations]);\n\n  // Load session stats periodically - Optimized for stability\n  useEffect(() => {\n    if (!matchingSessionId) return;\n\n    const loadStats = async () => {\n      try {\n        const prefs = await matchingService.getUserPreferences(memberId);\n        \n        if (mountedRef.current) {\n          setUserPreferences(prevPrefs => {\n            if (JSON.stringify(prevPrefs) !== JSON.stringify(prefs)) {\n              return prefs;\n            }\n            return prevPrefs;\n          });\n        }\n      } catch (error) {\n        console.error('Failed to load user preferences:', error);\n      }\n    };\n\n    loadStats();\n    // Increased interval to reduce frequent updates\n    const interval = setInterval(loadStats, 30000); // Update every 30 seconds instead of 10\n    return () => clearInterval(interval);\n  }, [matchingSessionId, memberId]);\n\n  // Handle movie swipe with algorithm feedback\n  const handleSwipe = useCallback(async (movieId: number, liked: boolean) => {\n    if (isProcessingSwipe || !currentMovie) return;\n\n    setIsProcessingSwipe(true);\n    const timeSpent = Date.now() - swipeStartTimeRef.current;\n\n    try {\n      // Submit to Firebase first\n      await sessionService.updateMovieSwipe(session.id, memberId, movieId, liked);\n\n      // Submit to algorithm if enabled\n      if (matchingSessionId && algorithmEnabled) {\n        const feedbackType = liked ? 'like' : 'dislike';\n        try {\n          await matchingService.submitFeedback(matchingSessionId, {\n            user_id: memberId,\n            movie_id: movieId,\n            feedback_type: feedbackType,\n            time_spent_ms: timeSpent\n          });\n        } catch (algorithmError) {\n          console.error('[Algorithm] Failed to submit feedback:', algorithmError);\n          // Don't throw here - let Firebase save continue even if algorithm fails\n        }\n\n        // Load fresh recommendations after feedback\n        setTimeout(() => {\n          loadRecommendations();\n        }, 1000);\n      }\n\n      // Move to next movie\n      const currentIndex = movieQueue.findIndex(m => m.id === movieId);\n      const nextIndex = currentIndex + 1;\n      \n      if (nextIndex < movieQueue.length) {\n        setCurrentMovie(movieQueue[nextIndex]);\n      } else {\n        setCurrentMovie(null);\n        await loadRecommendations();\n      }\n\n    } catch (error: any) {\n      console.error('Error processing swipe:', error);\n      setError('Failed to process swipe');\n    } finally {\n      setIsProcessingSwipe(false);\n    }\n  }, [\n    isProcessingSwipe, \n    currentMovie, \n    session.id,\n    memberId, \n    matchingSessionId, \n    algorithmEnabled,\n    movieQueue,\n    loadRecommendations\n  ]);\n\n  // Handle like button\n  const handleLike = useCallback(() => {\n    if (currentMovie) {\n      handleSwipe(currentMovie.id, true);\n    }\n  }, [currentMovie, handleSwipe]);\n\n  // Handle dislike button\n  const handleDislike = useCallback(() => {\n    if (currentMovie) {\n      handleSwipe(currentMovie.id, false);\n    }\n  }, [currentMovie, handleSwipe]);\n\n  // Track time spent viewing each movie\n  useEffect(() => {\n    if (currentMovie) {\n      swipeStartTimeRef.current = Date.now();\n    }\n  }, [currentMovie]);\n\n  // Check for matches in Firebase - Optimized to reduce re-renders\n  const checkForMatches = useCallback(async () => {\n    if (!session.matches || session.matches.length === 0) {\n      // Only log once when there are no matches, not repeatedly\n      return;\n    }\n\n    const latestMatchId = session.matches[session.matches.length - 1];\n    \n    // Check if this user liked the matched movie\n    const userHistory = session.userHistory[memberId] || [];\n    const userLikedMatch = userHistory.some(h => h.movieId === latestMatchId && h.decision);\n    \n    // Check if the other user also liked the matched movie\n    const otherUserHistory = otherMemberId ? (session.userHistory[otherMemberId] || []) : [];\n    const otherUserLikedMatch = otherUserHistory.some(h => h.movieId === latestMatchId && h.decision);\n    \n    // Only show match modal if:\n    // 1. This user liked the movie\n    // 2. The other user also liked the movie (mutual like)\n    // 3. We haven't already shown this match\n    if (userLikedMatch && otherUserLikedMatch && (!matchFound || matchFound.id !== latestMatchId)) {\n      console.log('🎉 Match detected!', { \n        movieId: latestMatchId, \n        userLiked: userLikedMatch, \n        otherUserLiked: otherUserLikedMatch,\n        memberId,\n        otherMemberId \n      });\n      \n      setLoadingMatchedMovie(true);\n      \n      try {\n        // First try to find the movie in our current queue\n        let matchedMovie = movieQueue.find(m => m.id === latestMatchId);\n        \n        // If not found in queue, try to fetch from algorithm recommendations if available\n        if (!matchedMovie && matchingSessionId) {\n          try {\n            const recommendations = await matchingService.getRecommendations(matchingSessionId, 50, memberId);\n            matchedMovie = recommendations.movies.find(m => m.id === latestMatchId);\n          } catch (error) {\n            console.warn('Could not fetch from algorithm:', error);\n          }\n        }\n        \n        // If still not found, use current movie as fallback (shouldn't happen often)\n        if (!matchedMovie && currentMovie?.id === latestMatchId) {\n          matchedMovie = currentMovie;\n        }\n        \n        // Final fallback: fetch movie details directly from the movie service\n        if (!matchedMovie) {\n          try {\n            console.log('🔍 Fetching movie details from movie service for ID:', latestMatchId);\n            const movieFromService = await movieService.getMovieDetails(latestMatchId);\n            if (movieFromService) {\n              matchedMovie = movieFromService;\n            }\n          } catch (error) {\n            console.warn('Could not fetch movie details from movie service:', error);\n          }\n        }\n        \n        if (matchedMovie) {\n          console.log('📽️ Showing match modal for movie:', matchedMovie.title);\n          console.log('📽️ Movie data:', {\n            title: matchedMovie.title,\n            poster_url: matchedMovie.poster_url,\n            description: matchedMovie.description,\n            genres: matchedMovie.genres,\n            release_year: matchedMovie.release_year\n          });\n          setMatchFound(matchedMovie);\n        } else {\n          console.warn('⚠️ Could not find movie data for match:', latestMatchId);\n        }\n      } catch (error) {\n        console.error('Error retrieving matched movie:', error);\n      } finally {\n        setLoadingMatchedMovie(false);\n      }\n    }\n  }, [session.matches, session.userHistory, memberId, otherMemberId, matchFound, matchingSessionId, movieQueue, currentMovie]);\n\n  useEffect(() => {\n    checkForMatches();\n  }, [checkForMatches]);\n\n  // Only log renders when state actually changes\n  const currentRenderState = JSON.stringify({\n    currentMovie: currentMovie?.title,\n    algorithmEnabled,\n    matchingSessionId,\n    sessionMatches: session.matches?.length || 0,\n    userHistoryLength: (session.userHistory[memberId] || []).length\n  });\n\n  if (prevRenderStateRef.current !== currentRenderState) {\n    console.log('🎬 Rendering SmartMovieMatching with:', { \n      currentMovie: currentMovie?.title, \n      algorithmEnabled, \n      matchingSessionId,\n      sessionMatches: session.matches?.length || 0,\n      userHistoryLength: (session.userHistory[memberId] || []).length\n    });\n    prevRenderStateRef.current = currentRenderState;\n  }\n\n  if (loading) {\n    return (\n      <div className=\"movie-matching\">\n        <div className=\"loading-container\">\n          <div className=\"loading-spinner\"></div>\n          <p>Loading personalized recommendations...</p>\n          {algorithmEnabled && (\n            <small>Powered by MovieMatch Algorithm</small>\n          )}\n          {/* Debug info */}\n          <div style={{ marginTop: '20px', fontSize: '0.8rem', color: 'rgba(255,255,255,0.7)' }}>\n            Debug: Session ID: {session.id}, Member ID: {memberId}, Other Member: {otherMemberId || 'waiting...'}\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  if (error) {\n    return (\n      <div className=\"movie-matching\">\n        <div className=\"error-container\">\n          <p className=\"error-message\">{error}</p>\n          <button onClick={loadRecommendations} className=\"retry-button\">\n            Try Again\n          </button>\n          {/* Debug info */}\n          <div style={{ marginTop: '20px', fontSize: '0.8rem', color: '#6c757d' }}>\n            Debug: Algorithm enabled: {algorithmEnabled ? 'Yes' : 'No'}, Session: {matchingSessionId || 'None'}\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  if (!currentMovie) {\n    return (\n      <div className=\"movie-matching\">\n        <div className=\"no-movies-container\">\n          <p>No more movies available</p>\n          <button onClick={loadRecommendations} className=\"retry-button\">\n            Load More\n          </button>\n          {/* Debug info */}\n          <div style={{ marginTop: '20px', fontSize: '0.8rem', color: '#6c757d' }}>\n            Debug: Queue length: {movieQueue.length}, Algorithm: {algorithmEnabled ? 'enabled' : 'disabled'}\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"movie-matching\">\n      {/* Algorithm Status Bar */}\n      {algorithmEnabled && algorithmState && (\n        <div className=\"algorithm-status\">\n          <div className=\"status-info\">\n            <span className={`stage-badge stage-${algorithmState.session_stage}`}>\n              {algorithmState.session_stage.toUpperCase()}\n            </span>\n            <span className=\"interactions\">\n              {algorithmState.total_interactions} interactions\n            </span>\n            {algorithmState.mutual_likes > 0 && (\n              <span className=\"mutual-likes\">\n                🎯 {algorithmState.mutual_likes} mutual likes\n              </span>\n            )}\n          </div>\n          {userPreferences && userPreferences.confidence_score > 0 && (\n            <div className=\"confidence-score\">\n              Confidence: {(userPreferences.confidence_score * 100).toFixed(0)}%\n            </div>\n          )}\n        </div>\n      )}\n\n      {/* Preferences Comparison */}\n      {algorithmEnabled && matchingSessionId && otherMemberId && showPreferences && (\n        <PreferencesComparison\n          user1Id={memberId}\n          user2Id={otherMemberId}\n          user1Name=\"You\"\n          user2Name=\"Partner\"\n          matchingSessionId={matchingSessionId}\n        />\n      )}\n\n      {/* Semantic Preferences Analysis */}\n      {algorithmEnabled && matchingSessionId && otherMemberId && showSemanticAnalysis && (\n        <SemanticPreferencesComparison\n          user1Id={memberId}\n          user2Id={otherMemberId}\n          user1Name=\"You\"\n          user2Name=\"Partner\"\n        />\n      )}\n\n      {/* Movie Card */}\n      <div className=\"movie-card\">\n        {isPosterLoading && (\n          <div className=\"poster-loading\">\n            <div className=\"loading-spinner\"></div>\n          </div>\n        )}\n        \n        <img\n          src={currentMovie.poster_url || '/placeholder-poster.jpg'}\n          alt={`${currentMovie.title} poster`}\n          className=\"movie-poster\"\n          onLoad={() => setIsPosterLoading(false)}\n          onError={() => setIsPosterLoading(false)}\n          style={{ display: isPosterLoading ? 'none' : 'block' }}\n        />\n        \n        {/* Why Button - Top Right Corner */}\n        {algorithmEnabled && matchingSessionId && otherMemberId && (\n          <button\n            className=\"why-button\"\n            onClick={() => setShowExplanation(true)}\n            title=\"Why was this movie recommended?\"\n          >\n            🤔 Why?\n          </button>\n        )}\n        \n        <div className=\"movie-info\">\n          <h2 className=\"movie-title\">{currentMovie.title}</h2>\n          <div className=\"movie-meta\">\n            <span className=\"movie-year\">{currentMovie.release_year}</span>\n            <span className=\"movie-rating\">⭐ {currentMovie.rating}</span>\n            {currentMovie.runtime_minutes && (\n              <span className=\"movie-runtime\">{currentMovie.runtime_minutes}min</span>\n            )}\n          </div>\n          \n          {currentMovie.genres && (\n            <div className=\"movie-genres\">\n              {(Array.isArray(currentMovie.genres) ? currentMovie.genres : JSON.parse(currentMovie.genres)).map((genre: string) => (\n                <span key={genre} className=\"genre-tag\">{genre}</span>\n              ))}\n            </div>\n          )}\n          \n          {currentMovie.description && (\n            <p className=\"movie-description\">{currentMovie.description}</p>\n          )}\n        </div>\n      </div>\n\n      {/* Action Buttons */}\n      <div className=\"action-buttons\">\n        <button\n          className=\"dislike-button\"\n          onClick={handleDislike}\n          disabled={isProcessingSwipe}\n        >\n          👎 Pass\n        </button>\n        \n        <button\n          className=\"like-button\"\n          onClick={handleLike}\n          disabled={isProcessingSwipe}\n        >\n          👍 Like\n        </button>\n      </div>\n\n      {/* Toggle Buttons */}\n      <div className=\"toggle-buttons\">\n        {algorithmEnabled && otherMemberId && (\n          <button\n            className=\"preferences-toggle\"\n            onClick={() => setShowPreferences(!showPreferences)}\n          >\n            {showPreferences ? 'Hide Preferences' : 'Show Taste Profiles'}\n          </button>\n        )}\n        \n        {algorithmEnabled && otherMemberId && (\n          <button\n            className=\"semantic-analysis-toggle\"\n            onClick={() => setShowSemanticAnalysis(!showSemanticAnalysis)}\n          >\n            {showSemanticAnalysis ? 'Hide Deep Analysis' : 'Show Deep Analysis'}\n          </button>\n        )}\n        \n        <button\n          className=\"history-toggle\"\n          onClick={() => setShowHistory(!showHistory)}\n        >\n          {showHistory ? 'Hide History' : 'Show History'}\n        </button>\n      </div>\n\n      {/* User History */}\n      {showHistory && (\n        <UserHistory\n          history={session.userHistory[memberId] || []}\n          movies={{}} // Empty for now, would need to load movie details\n          onClose={() => setShowHistory(false)}\n        />\n      )}\n\n      {/* Match Found Modal */}\n      {matchFound && (\n        <div className=\"match-modal-overlay\" onClick={() => setMatchFound(null)}>\n          <div className=\"match-modal\" onClick={e => e.stopPropagation()}>\n            {/* 1. Celebration message */}\n            <div className=\"match-celebration\">\n              <div className=\"celebration-text\">🎉 IT'S A MATCH! 🎉</div>\n              <div className=\"celebration-subtitle\">You both loved this movie!</div>\n            </div>\n\n            {/* 2. Movie card (vertical layout) */}\n            <div className=\"matched-movie-card vertical\">\n              <div className=\"matched-poster-container\">\n                <img\n                  src={matchFound.poster_url || '/placeholder-poster.jpg'}\n                  alt={`${matchFound.title} poster`}\n                  className=\"matched-poster\"\n                  onError={(e) => {\n                    console.log('🖼️ Poster failed to load:', matchFound.poster_url);\n                    (e.target as HTMLImageElement).src = '/placeholder-poster.jpg';\n                  }}\n                  onLoad={() => {\n                    console.log('🖼️ Poster loaded successfully:', matchFound.poster_url);\n                  }}\n                />\n              </div>\n              <div className=\"matched-movie-details\">\n                <h3 className=\"matched-title\">{matchFound.title || 'Unknown Title'}</h3>\n                <div className=\"matched-meta\">\n                  {matchFound.release_year && (\n                    <span className=\"matched-year\">{matchFound.release_year}</span>\n                  )}\n                  {matchFound.rating && (\n                    <span className=\"matched-rating\">⭐ {matchFound.rating}</span>\n                  )}\n                  {matchFound.runtime_minutes && (\n                    <span className=\"matched-runtime\">{matchFound.runtime_minutes}min</span>\n                  )}\n                </div>\n                {matchFound.genres && (\n                  <div className=\"matched-genres\">\n                    {(Array.isArray(matchFound.genres) \n                      ? matchFound.genres \n                      : JSON.parse(matchFound.genres || '[]')).slice(0, 3).map((genre: string) => (\n                      <span key={genre} className=\"matched-genre-tag\">{genre}</span>\n                    ))}\n                  </div>\n                )}\n                {matchFound.description && (\n                  <p className=\"matched-description\">\n                    {matchFound.description.length > 150 \n                      ? `${matchFound.description.substring(0, 150)}...` \n                      : matchFound.description}\n                  </p>\n                )}\n              </div>\n            </div>\n\n            {/* 3. Continue Swiping button */}\n            <div className=\"match-actions\">\n              <button \n                className=\"close-match-button\"\n                onClick={() => setMatchFound(null)}\n              >\n                Continue Swiping\n              </button>\n            </div>\n          </div>\n        </div>\n      )}\n\n      {/* Loading Match Modal */}\n      {loadingMatchedMovie && (\n        <div className=\"match-modal-overlay\">\n          <div className=\"match-modal loading-match\">\n            <div className=\"loading-spinner\"></div>\n            <p>Loading match details...</p>\n          </div>\n        </div>\n      )}\n      \n      {isProcessingSwipe && (\n        <div className=\"processing-overlay\">\n          <div className=\"loading-spinner\"></div>\n        </div>\n      )}\n\n      {/* Recommendation Explanation Modal */}\n      {showExplanation && currentMovie && algorithmEnabled && matchingSessionId && otherMemberId && (\n        <RecommendationExplanation\n          sessionId={matchingSessionId}\n          movieId={currentMovie.id}\n          user1Id={memberId}\n          user2Id={otherMemberId}\n          user1Name=\"You\"\n          user2Name=\"Partner\"\n          onClose={() => setShowExplanation(false)}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default SmartMovieMatching;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}